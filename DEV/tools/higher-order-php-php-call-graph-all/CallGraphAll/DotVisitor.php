<?php
  /**
   * A PHP_CallGraphAll_DotVisitor object visits each node in the PHP
   * abstract syntax tree.
   *
   * PHP Version 5
   *
   * @category  PHP
   * @package   PHP_CallGraphAll
   * @author    Rudolf Olah <omouse@gmail.com>
   * @copyright 2011 Rudolf Olah
   * @license   General Public License (GPL) version 3 or later
   * @link      http://neverfriday.com/?q=project/php_callgraphall
   */

  /**
   * Generates a graphviz source file while visting each node in the
   * abstract syntax tree being generated by PHPParser.
   *
   * @category  PHP
   * @package   PHP_CallGraphAll
   * @author    Rudolf Olah <omouse@gmail.com>
   * @copyright 2011 Rudolf Olah
   * @license   General Public License (GPL) version 3 or later
   * @link      http://neverfriday.com/?q=project/php_callgraphall
   */
class PHP_CallGraphAll_DotVisitor extends PHPParser_NodeVisitorAbstract
{
    /**
     * The name of the function currently being defined.
     *
     * @var string
     */
    private $_functionName;
    /**
     * The name of the class currently being defined. Used as a prefix
     * to indicate methods in the graph.
     *
     * @var string
     */
    private $_className;

    /**
     * Returns the graphviz command connecting the current function (or
     * method) to the given function.
     *
     * @param string|PHPParser_Node_Name $functionCallName The name of
     * the function (or method) being called.
     *
     * @return string The graphviz node command
     */
    private function _getCommand($functionCallName)
    {
        $prefix = $this->_className ? $this->_className . '.' : '';
        $name   = $this->_functionName ? $this->_functionName : '[main]';
        return "\"$prefix$name\" -> \"$functionCallName\"\n";
    }

    /**
     * When a node is entered and it is a function definition, we start
     * to print out the nodes that are functions called from within this
     * function.
     *
     * @param PHPParser_NodeAbstract &$node The node that we are entering
     *
     * @return void
     */
    public function enterNode(PHPParser_NodeAbstract &$node)
    {
        $type = $node->getType();
        if ($type == 'Stmt_Class') {
            $this->_className = $node->name;
        } elseif ($type == 'Stmt_Func' || $type == 'Stmt_ClassMethod') {
            $this->_functionName = $node->name;
        } elseif ($type == 'Expr_FuncCall' || $type == 'Expr_MethodCall') {
            echo $this->_getCommand($node->name);
        }
    }

    /**
     * When a node is left and it is a function definition, we reset the
     * current function definition.
     *
     * @param PHPParser_NodeAbstract &$node The node that we are leaving
     *
     * @return void
     */
    public function leaveNode(PHPParser_NodeAbstract &$node)
    {
        if ($node->getType() == 'Stmt_Class') {
            $this->_className = '';
        }
    }
}
