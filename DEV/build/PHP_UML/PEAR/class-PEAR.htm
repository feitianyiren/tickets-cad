<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
	<title>class PEAR</title>
	<link type="text/css" rel="stylesheet" href="../$resources/style.css"/>
	<script type="text/javascript" language="javascript" src="../$resources/treeview.js"></script>
</head>
<body onload="toggler.setupTreeView('MainList');toggler.backToMemorizedState('MainList', 'btnToggle')">
	<ul class="navig">
	<li><a href="javascript:toggler.toggleAll('MainList', 'btnToggle')" class="expandAllBtn" id="btnToggle">Expand all</a></li><li><a href="../help.htm" class="helpBtn">Help</a></li><li><a href="../index-all.htm" class="indexAllBtn">Index</a></li><li><a href="package-summary.htm" class="top">Package</a></li><li><a href="class-PEAR_Error.htm" class="right">Next class</a></li>
	</ul>
	<h1 class="class">PEAR</h1>
	<div id="MainList">
	<div class="description"><p>Class <span class="title">PEAR\PEAR</span></p><ul class="description"><li>Base class for other PEAR classes.  Provides rudimentary emulation of destructors.<br />
<br />
If you want a destructor in your class, inherit PEAR and make a destructor method called _yourclassname (same name as the constructor, but with a &quot;_&quot; prefix).  Also, in your constructor you have to call the PEAR constructor: $this-&gt;PEAR();.<br />
The destructor method will be called without parameters.  Note that at in some SAPI implementations (such as Apache), any output during the request shutdown (in which destructors are called) seems to be discarded.  If you need to get any debug information from your destructor, use error_log(), syslog() or something similar.<br />
<br />
IMPORTANT! To use the emulated destructors you need to create the objects by reference: $obj =&amp; new PEAR_child;</li><li class="smaller">@category pear</li><li class="smaller">@package PEAR</li><li class="smaller">@author Stig Bakken &lt;ssb@php.net&gt;</li><li class="smaller">@author Tomas V.V. Cox &lt;cox@idecnet.com&gt;</li><li class="smaller">@author Greg Beaver &lt;cellog@php.net&gt;</li><li class="smaller">@copyright 1997-2006 The PHP Group</li><li class="smaller">@license http://www.php.net/license/3_0.txt PHP License 3.0</li><li class="smaller">@version Release: 1.6.1</li><li class="smaller">@link http://pear.php.net/package/PEAR</li><li class="smaller">@see PEAR_Error</li><li class="smaller">@since Class available since PHP 4.0.2</li><li class="smaller">@link http://pear.php.net/manual/en/core.pear.php#core.pear.pear</li><li>File: DEV/tools/phpcallgraph-0.8.0/lib/pear/PEAR.php</li></ul></div><h2>Properties</h2><ul class="summary"><li class="Collapsed" id="_debug"><a href="javascript:void(0);" class="property-pub" target="main">$_debug</a><ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">$_debug</span><span class="defVal"> = false</span></li><li>Whether to enable internal debug messages.</li><li class="smaller">@access private</li></ul></li><li class="Collapsed" id="_default_error_mode"><a href="javascript:void(0);" class="property-pub" target="main">$_default_error_mode</a><ul class="description"><li>Public <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">$_default_error_mode</span><span class="defVal"> = null</span></li><li>Default error mode for this object.</li><li class="smaller">@access private</li></ul></li><li class="Collapsed" id="_default_error_options"><a href="javascript:void(0);" class="property-pub" target="main">$_default_error_options</a><ul class="description"><li>Public <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">$_default_error_options</span><span class="defVal"> = null</span></li><li>Default error options used for this object when error mode is PEAR_ERROR_TRIGGER.</li><li class="smaller">@access private</li></ul></li><li class="Collapsed" id="_default_error_handler"><a href="javascript:void(0);" class="property-pub" target="main">$_default_error_handler</a><ul class="description"><li>Public <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">$_default_error_handler</span><span class="defVal"> = &#039;&#039;</span></li><li>Default error handler (callback) for this object, if error mode is PEAR_ERROR_CALLBACK.</li><li class="smaller">@access private</li></ul></li><li class="Collapsed" id="_error_class"><a href="javascript:void(0);" class="property-pub" target="main">$_error_class</a><ul class="description"><li>Public <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">$_error_class</span><span class="defVal"> = &#039;PEAR_Error&#039;</span></li><li>Which class to use for error objects.</li><li class="smaller">@access private</li></ul></li><li class="Collapsed" id="_expected_errors"><a href="javascript:void(0);" class="property-pub" target="main">$_expected_errors</a><ul class="description"><li>Public <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">$_expected_errors</span><span class="defVal"> = array()</span></li><li>An array of expected errors.</li><li class="smaller">@access private</li></ul></li></ul><h2>Functions</h2><ul class="summary"><li class="Collapsed" id="f525cccaca856b"><a href="javascript:void(0);" class="method-pub" target="main">PEAR</a>(<a href="../datatype-string.htm" class="link">string</a> $error_class<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">PEAR</span>(<a href="../datatype-string.htm" class="link">string</a> $error_class<span class="defVal"> = null</span>)</li><li>Constructor.  Registers this object in $_PEAR_destructor_object_list for destructor emulation if a destructor object exists.</li><li class="smaller">@param string $error_class (optional) which class to use for</li><li class="smaller">@access public</li></ul></li><li class="Collapsed" id="f525cccaca8b53"><a href="javascript:void(0);" class="method-pub" target="main">_PEAR</a>()<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">_PEAR</span>()</li><li>Destructor (the emulated type of...).  Does nothing right now, but is included for forward compatibility, so subclass destructors should always call it.<br />
<br />
See the note in the class desciption about output from destructors.</li><li class="smaller">@access public</li></ul></li><li class="Collapsed" id="f525cccaca8e5f"><a href="javascript:void(0);" class="method-pub" target="main">getStaticProperty</a>(<a href="../datatype-string.htm" class="link">string</a> $class, <a href="../datatype-string.htm" class="link">string</a> $var)<ul class="description"><li>Public <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">getStaticProperty</span>(<a href="../datatype-string.htm" class="link">string</a> $class, <a href="../datatype-string.htm" class="link">string</a> $var)</li><li>If you have a class that's mostly/entirely static, and you need static properties, you can use this method to simulate them. Eg. in your method(s) do this: $myVar = &amp;PEAR::getStaticProperty('myclass', 'myVar'); You MUST use a reference, or they will not persist!</li><li class="smaller">@access public</li><li class="smaller">@param string $class The calling classname, to prevent clashes</li><li class="smaller">@param string $var The variable to retrieve.</li><li class="smaller">@return mixed A reference to the variable. If not set it will be</li></ul></li><li class="Collapsed" id="f525cccaca944c"><a href="javascript:void(0);" class="method-pub" target="main">registerShutdownFunc</a>(<a href="../datatype-mixed.htm" class="link">mixed</a> $func, <a href="../datatype-array.htm" class="link">array</a> $args<span class="defVal"> = array()</span>)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">registerShutdownFunc</span>(<a href="../datatype-mixed.htm" class="link">mixed</a> $func, <a href="../datatype-array.htm" class="link">array</a> $args<span class="defVal"> = array()</span>)</li><li>Use this function to register a shutdown method for static classes.</li><li class="smaller">@access public</li><li class="smaller">@param mixed $func The function name (or array of class/method) to call</li><li class="smaller">@param mixed $args The arguments to pass to the function</li></ul></li><li class="Collapsed" id="f525cccaca993c"><a href="javascript:void(0);" class="method-pub" target="main">isError</a>(<a href="../datatype-mixed.htm" class="link">mixed</a> $data, <a href="../datatype-int.htm" class="link">int</a> $code<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">isError</span>(<a href="../datatype-mixed.htm" class="link">mixed</a> $data, <a href="../datatype-int.htm" class="link">int</a> $code<span class="defVal"> = null</span>)</li><li>Tell whether a value is a PEAR error.</li><li class="smaller">@param mixed $data the value to test</li><li class="smaller">@param int $code if $data is an error object, return true</li><li class="smaller">@access public</li><li class="smaller">@return bool true if parameter is an error</li></ul></li><li class="Collapsed" id="f525cccaca9e96"><a href="javascript:void(0);" class="method-pub" target="main">setErrorHandling</a>(<a href="../datatype-int.htm" class="link">int</a> $mode<span class="defVal"> = null</span>, <a href="../datatype-mixed.htm" class="link">mixed</a> $options<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">setErrorHandling</span>(<a href="../datatype-int.htm" class="link">int</a> $mode<span class="defVal"> = null</span>, <a href="../datatype-mixed.htm" class="link">mixed</a> $options<span class="defVal"> = null</span>)</li><li>Sets how errors generated by this object should be handled.<br />
Can be invoked both in objects and statically.  If called statically, setErrorHandling sets the default behaviour for all PEAR objects.  If called in an object, setErrorHandling sets the default behaviour for that object.</li><li class="smaller">@param int $mode</li><li class="smaller">@param mixed $options</li><li class="smaller">@access public</li><li class="smaller">@see PEAR_ERROR_RETURN</li><li class="smaller">@see PEAR_ERROR_PRINT</li><li class="smaller">@see PEAR_ERROR_TRIGGER</li><li class="smaller">@see PEAR_ERROR_DIE</li><li class="smaller">@see PEAR_ERROR_CALLBACK</li><li class="smaller">@see PEAR_ERROR_EXCEPTION</li><li class="smaller">@since PHP 4.0.5</li></ul></li><li class="Collapsed" id="f525cccacaa864"><a href="javascript:void(0);" class="method-pub" target="main">expectError</a>(<a href="../datatype-string.htm" class="link">string</a> $code<span class="defVal"> = &#039;*&#039;</span>)<ul class="description"><li>Public <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">expectError</span>(<a href="../datatype-string.htm" class="link">string</a> $code<span class="defVal"> = &#039;*&#039;</span>)</li><li>This method is used to tell which errors you expect to get.<br />
Expected errors are always returned with error mode PEAR_ERROR_RETURN.  Expected error codes are stored in a stack, and this method pushes a new element onto it.  The list of expected errors are in effect until they are popped off the stack with the popExpect() method.<br />
<br />
Note that this method can not be called statically</li><li class="smaller">@param mixed $code a single error code or an array of error codes to expect</li><li class="smaller">@return int the new depth of the &quot;expected errors&quot; stack</li><li class="smaller">@access public</li></ul></li><li class="Collapsed" id="f525cccacaacb6"><a href="javascript:void(0);" class="method-pub" target="main">popExpect</a>()<ul class="description"><li>Public <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">popExpect</span>()</li><li>This method pops one element off the expected error codes stack.</li><li class="smaller">@return array the list of error codes that were popped</li></ul></li><li class="Collapsed" id="f525cccacaaefc"><a href="javascript:void(0);" class="method-pub" target="main">_checkDelExpect</a>(<a href="../datatype-mixed.htm" class="link">mixed</a> $error_code)<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">_checkDelExpect</span>(<a href="../datatype-mixed.htm" class="link">mixed</a> $error_code)</li><li>This method checks unsets an error code if available</li><li class="smaller">@param mixed error code</li><li class="smaller">@return bool true if the error code was unset, false otherwise</li><li class="smaller">@access private</li><li class="smaller">@since PHP 4.3.0</li></ul></li><li class="Collapsed" id="f525cccacab44e"><a href="javascript:void(0);" class="method-pub" target="main">delExpect</a>(<a href="../datatype-mixed.htm" class="link">mixed</a> $error_code)<ul class="description"><li>Public <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">delExpect</span>(<a href="../datatype-mixed.htm" class="link">mixed</a> $error_code)</li><li>This method deletes all occurences of the specified element from the expected error codes stack.</li><li class="smaller">@param mixed $error_code error code that should be deleted</li><li class="smaller">@return mixed list of error codes that were deleted or error</li><li class="smaller">@access public</li><li class="smaller">@since PHP 4.3.0</li></ul></li><li class="Collapsed" id="f525cccacabb31"><a href="javascript:void(0);" class="method-pub" target="main">raiseError</a>(<a href="../datatype-mixed.htm" class="link">mixed</a> $message<span class="defVal"> = null</span>, <a href="../datatype-int.htm" class="link">int</a> $code<span class="defVal"> = null</span>, <a href="../datatype-int.htm" class="link">int</a> $mode<span class="defVal"> = null</span>, <a href="../datatype-mixed.htm" class="link">mixed</a> $options<span class="defVal"> = null</span>, <a href="../datatype-string.htm" class="link">string</a> $userinfo<span class="defVal"> = null</span>, <a href="../datatype-string.htm" class="link">string</a> $error_class<span class="defVal"> = null</span>, <a href="../datatype-bool.htm" class="link">bool</a> $skipmsg<span class="defVal"> = false</span>)<ul class="description"><li>Public <a href="../datatype-object.htm" class="link">object</a> <span class="smallTitle">raiseError</span>(<a href="../datatype-mixed.htm" class="link">mixed</a> $message<span class="defVal"> = null</span>, <a href="../datatype-int.htm" class="link">int</a> $code<span class="defVal"> = null</span>, <a href="../datatype-int.htm" class="link">int</a> $mode<span class="defVal"> = null</span>, <a href="../datatype-mixed.htm" class="link">mixed</a> $options<span class="defVal"> = null</span>, <a href="../datatype-string.htm" class="link">string</a> $userinfo<span class="defVal"> = null</span>, <a href="../datatype-string.htm" class="link">string</a> $error_class<span class="defVal"> = null</span>, <a href="../datatype-bool.htm" class="link">bool</a> $skipmsg<span class="defVal"> = false</span>)</li><li>This method is a wrapper that returns an instance of the configured error class with this object's default error handling applied.  If the $mode and $options parameters are not specified, the object's defaults are used.</li><li class="smaller">@param mixed $message a text error message or a PEAR error object</li><li class="smaller">@param int $code a numeric error code (it is up to your class</li><li class="smaller">@param int $mode One of PEAR_ERROR_RETURN, PEAR_ERROR_PRINT,</li><li class="smaller">@param mixed $options If $mode is PEAR_ERROR_TRIGGER, this parameter</li><li class="smaller">@param string $userinfo If you need to pass along for example debug</li><li class="smaller">@param string $error_class The returned error object will be</li><li class="smaller">@param bool $skipmsg If true, raiseError will only pass error codes,</li><li class="smaller">@access public</li><li class="smaller">@return object a PEAR error object</li><li class="smaller">@see PEAR::setErrorHandling</li><li class="smaller">@since PHP 4.0.5</li></ul></li><li class="Collapsed" id="f525cccacacad6"><a href="javascript:void(0);" class="method-pub" target="main">throwError</a>(<a href="../datatype-string.htm" class="link">string</a> $message<span class="defVal"> = null</span>, <a href="../datatype-mixed.htm" class="link">mixed</a> $code<span class="defVal"> = null</span>, <a href="../datatype-mixed.htm" class="link">mixed</a> $userinfo<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">throwError</span>(<a href="../datatype-string.htm" class="link">string</a> $message<span class="defVal"> = null</span>, <a href="../datatype-mixed.htm" class="link">mixed</a> $code<span class="defVal"> = null</span>, <a href="../datatype-mixed.htm" class="link">mixed</a> $userinfo<span class="defVal"> = null</span>)</li><li>Simpler form of raiseError with fewer options.  In most cases message, code and userinfo are enough.</li><li class="smaller">@param string $message</li></ul></li><li class="Collapsed" id="f525cccacacf84"><a href="javascript:void(0);" class="method-pub" target="main">staticPushErrorHandling</a>(<a href="../datatype-mixed.htm" class="link">mixed</a> $mode, <a href="../datatype-mixed.htm" class="link">mixed</a> $options<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">staticPushErrorHandling</span>(<a href="../datatype-mixed.htm" class="link">mixed</a> $mode, <a href="../datatype-mixed.htm" class="link">mixed</a> $options<span class="defVal"> = null</span>)</li></ul></li><li class="Collapsed" id="f525cccacad466"><a href="javascript:void(0);" class="method-pub" target="main">staticPopErrorHandling</a>()<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">staticPopErrorHandling</span>()</li></ul></li><li class="Collapsed" id="f525cccacad87f"><a href="javascript:void(0);" class="method-pub" target="main">pushErrorHandling</a>(<a href="../datatype-mixed.htm" class="link">mixed</a> $mode, <a href="../datatype-mixed.htm" class="link">mixed</a> $options<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">pushErrorHandling</span>(<a href="../datatype-mixed.htm" class="link">mixed</a> $mode, <a href="../datatype-mixed.htm" class="link">mixed</a> $options<span class="defVal"> = null</span>)</li><li>Push a new error handler on top of the error handler options stack. With this you can easily override the actual error handler for some code and restore it later with popErrorHandling.</li><li class="smaller">@param mixed $mode (same as setErrorHandling)</li><li class="smaller">@param mixed $options (same as setErrorHandling)</li><li class="smaller">@return bool Always true</li><li class="smaller">@see PEAR::setErrorHandling</li></ul></li><li class="Collapsed" id="f525cccacadf20"><a href="javascript:void(0);" class="method-pub" target="main">popErrorHandling</a>()<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">popErrorHandling</span>()</li><li>Pop the last error handler used</li><li class="smaller">@return bool Always true</li><li class="smaller">@see PEAR::pushErrorHandling</li></ul></li><li class="Collapsed" id="f525cccacae36c"><a href="javascript:void(0);" class="method-pub" target="main">loadExtension</a>(<a href="../datatype-string.htm" class="link">string</a> $ext)<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">loadExtension</span>(<a href="../datatype-string.htm" class="link">string</a> $ext)</li><li>OS independant PHP extension load. Remember to take care on the correct extension name for case sensitive OSes.</li><li class="smaller">@param string $ext The extension name</li><li class="smaller">@return bool Success or not on the dl() call</li></ul></li></ul>
	</div>
	<div id="footer">Documentation generated on Oct 15, 2013, 0:03:45 -0500 by <a href="http://pear.php.net/package/PHP_UML/" target="_new">PHP_UML</a></div>
</body>
</html>