<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
	<title>class ezcBase</title>
	<link type="text/css" rel="stylesheet" href="../$resources/style.css"/>
	<script type="text/javascript" language="javascript" src="../$resources/treeview.js"></script>
</head>
<body onload="toggler.setupTreeView('MainList');toggler.backToMemorizedState('MainList', 'btnToggle')">
	<ul class="navig">
	<li><a href="javascript:toggler.toggleAll('MainList', 'btnToggle')" class="expandAllBtn" id="btnToggle">Expand all</a></li><li><a href="../help.htm" class="helpBtn">Help</a></li><li><a href="../index-all.htm" class="indexAllBtn">Index</a></li><li><a href="package-summary.htm" class="top">Package</a></li><li><a href="class-ezcBaseAutoloadException.htm" class="right">Next class</a></li>
	</ul>
	<h1 class="class">ezcBase</h1>
	<div id="MainList">
	<div class="description"><p>Class <span class="title">Base\ezcBase</span></p><ul class="description"><li>Base class implements the methods needed to use the eZ components.</li><li class="smaller">@package Base</li><li class="smaller">@version //autogentag//</li><li class="smaller">@mainclass </li><li>File: DEV/tools/phpcallgraph-0.8.0/lib/ezcomponents/Base/src/base.php</li></ul></div><h2>Properties</h2><ul class="summary"><li class="Collapsed" id="DEP_PHP_EXTENSION"><a href="javascript:void(0);" class="property-pub" target="main">DEP_PHP_EXTENSION</a><ul class="description"><li>Public static const <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">DEP_PHP_EXTENSION</span><span class="defVal"> = &quot;extension&quot;</span></li><li>Used for dependency checking, to check for a PHP extension.</li></ul></li><li class="Collapsed" id="DEP_PHP_VERSION"><a href="javascript:void(0);" class="property-pub" target="main">DEP_PHP_VERSION</a><ul class="description"><li>Public static const <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">DEP_PHP_VERSION</span><span class="defVal"> = &quot;version&quot;</span></li><li>Used for dependency checking, to check for a PHP version.</li></ul></li><li class="Collapsed" id="MODE_PRODUCTION"><a href="javascript:void(0);" class="property-pub" target="main">MODE_PRODUCTION</a><ul class="description"><li>Public static const <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">MODE_PRODUCTION</span><span class="defVal"> = 0</span></li><li>Denotes the production mode</li></ul></li><li class="Collapsed" id="MODE_DEVELOPMENT"><a href="javascript:void(0);" class="property-pub" target="main">MODE_DEVELOPMENT</a><ul class="description"><li>Public static const <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">MODE_DEVELOPMENT</span><span class="defVal"> = 1</span></li><li>Denotes the development mode</li></ul></li><li class="Collapsed" id="libraryMode"><a href="javascript:void(0);" class="property-pri" target="main">$libraryMode</a><ul class="description"><li>Private static <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">$libraryMode</span><span class="defVal"> = &quot;devel&quot;</span></li><li>Indirectly it determines the path where the autoloads are stored.</li></ul></li><li class="Collapsed" id="currentWorkingDirectory"><a href="javascript:void(0);" class="property-pri" target="main">$currentWorkingDirectory</a><ul class="description"><li>Private static <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">$currentWorkingDirectory</span><span class="defVal"> = null</span></li><li>Contains the current working directory, which is used when the $libraryMode is set to &quot;custom&quot;.</li></ul></li><li class="Collapsed" id="packageDir"><a href="javascript:void(0);" class="property-pro" target="main">$packageDir</a><ul class="description"><li>Protected static <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">$packageDir</span><span class="defVal"> = null</span></li><li>The full path to the autoload directory.</li></ul></li><li class="Collapsed" id="runMode"><a href="javascript:void(0);" class="property-pri" target="main">$runMode</a><ul class="description"><li>Private static <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">$runMode</span><span class="defVal"> = selfMODE_DEVELOPMENT</span></li><li>Contains which development mode is used. It's &quot;development&quot; by default, because of backwards compatibility reasons.</li></ul></li><li class="Collapsed" id="repositoryDirs"><a href="javascript:void(0);" class="property-pro" target="main">$repositoryDirs</a><ul class="description"><li>Protected static <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">$repositoryDirs</span><span class="defVal"> = array()</span></li><li>Stores info with additional paths where autoload files and classes for autoloading could be found. Each item of $repositoryDirs looks like array( autoloadFileDir, baseDir ). The array key is the prefix belonging to classes within that repository - if provided when calling addClassRepository(), or an autoincrement integer otherwise.</li></ul></li><li class="Collapsed" id="autoloadArray"><a href="javascript:void(0);" class="property-pro" target="main">$autoloadArray</a><ul class="description"><li>Protected static <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">$autoloadArray</span><span class="defVal"> = array()</span></li><li>This variable stores all the elements from the autoload arrays. When a new autoload file is loaded, their files are added to this array.</li></ul></li><li class="Collapsed" id="externalAutoloadArray"><a href="javascript:void(0);" class="property-pro" target="main">$externalAutoloadArray</a><ul class="description"><li>Protected static <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">$externalAutoloadArray</span><span class="defVal"> = array()</span></li><li>This variable stores all the elements from the autoload arrays for external repositories. When a new autoload file is loaded, their files are added to this array.</li></ul></li><li class="Collapsed" id="options"><a href="javascript:void(0);" class="property-pri" target="main">$options</a><ul class="description"><li>Private static <a href="../Base/class-ezcBaseOptions.htm" class="link">Base\ezcBaseOptions</a> <span class="smallTitle">$options</span></li><li>Options for the ezcBase class.</li></ul></li></ul><h2>Functions</h2><ul class="summary"><li class="Collapsed" id="f525ccca7ebbca"><a href="javascript:void(0);" class="method-pub" target="main">setOptions</a>(<a href="../Base/class-ezcBaseAutoloadOptions.htm" class="link">Base\ezcBaseAutoloadOptions</a> $options)<ul class="description"><li>Public static <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">setOptions</span>(<a href="../Base/class-ezcBaseAutoloadOptions.htm" class="link">Base\ezcBaseAutoloadOptions</a> $options)</li><li>Associates an option object with this static class.</li><li class="smaller">@param ezcBaseAutoloadOptions $options</li></ul></li><li class="Collapsed" id="f525ccca7ebe81"><a href="javascript:void(0);" class="method-pub" target="main">autoload</a>(<a href="../datatype-string.htm" class="link">string</a> $className)<ul class="description"><li>Public static <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">autoload</span>(<a href="../datatype-string.htm" class="link">string</a> $className)</li><li>Tries to autoload the given className. If the className could be found this method returns true, otherwise false.<br />
<br />
This class caches the requested class names (including the ones who failed to load).</li><li class="smaller">@param string $className The name of the class that should be loaded.</li></ul></li><li class="Collapsed" id="f525ccca7eca06"><a href="javascript:void(0);" class="method-pub" target="main">setWorkingDirectory</a>(<a href="../datatype-string.htm" class="link">string</a> $directory)<ul class="description"><li>Public static <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">setWorkingDirectory</span>(<a href="../datatype-string.htm" class="link">string</a> $directory)</li><li>Sets the current working directory to $directory.</li><li class="smaller">@param string $directory</li></ul></li><li class="Collapsed" id="f525ccca7eccd0"><a href="javascript:void(0);" class="method-pro" target="main">setPackageDir</a>()<ul class="description"><li>Protected static <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">setPackageDir</span>()</li><li>Figures out the base path of the eZ Components installation.<br />
<br />
It stores the path that it finds in a static member variable. The path depends on the installation method of the eZ Components. The SVN version has a different path than the PEAR installed version.</li></ul></li><li class="Collapsed" id="f525ccca7ed0f2"><a href="javascript:void(0);" class="method-pro" target="main">requireFile</a>(<a href="../datatype-string.htm" class="link">string</a> $fileName, <a href="../datatype-string.htm" class="link">string</a> $className, <a href="../datatype-string.htm" class="link">string</a> $prefix)<ul class="description"><li>Protected static <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">requireFile</span>(<a href="../datatype-string.htm" class="link">string</a> $fileName, <a href="../datatype-string.htm" class="link">string</a> $className, <a href="../datatype-string.htm" class="link">string</a> $prefix)</li><li>Tries to load the autoload array and, if loaded correctly, includes the class.</li><li class="smaller">@param string $fileName Name of the autoload file.</li><li class="smaller">@param string $className Name of the class that should be autoloaded.</li><li class="smaller">@param string $prefix The prefix of the class repository.</li><li class="smaller">@return bool True is returned when the file is correctly loaded.</li></ul></li><li class="Collapsed" id="f525ccca7edd0d"><a href="javascript:void(0);" class="method-pro" target="main">loadFile</a>(<a href="../datatype-string.htm" class="link">string</a> $file)<ul class="description"><li>Protected static <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">loadFile</span>(<a href="../datatype-string.htm" class="link">string</a> $file)</li><li>Loads, require(), the given file name. If we are in development mode, &quot;/src/&quot; is inserted into the path.</li><li class="smaller">@param string $file The name of the file that should be loaded.</li></ul></li><li class="Collapsed" id="f525ccca7ee40f"><a href="javascript:void(0);" class="method-pro" target="main">loadExternalFile</a>(<a href="../datatype-string.htm" class="link">string</a> $file)<ul class="description"><li>Protected static <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">loadExternalFile</span>(<a href="../datatype-string.htm" class="link">string</a> $file)</li><li>Loads, require(), the given file name from an external package.</li><li class="smaller">@param string $file The name of the file that should be loaded.</li></ul></li><li class="Collapsed" id="f525ccca7ee73c"><a href="javascript:void(0);" class="method-pub" target="main">checkDependency</a>(<a href="../datatype-string.htm" class="link">string</a> $component, <a href="../datatype-int.htm" class="link">int</a> $type, <a href="../datatype-mixed.htm" class="link">mixed</a> $value)<ul class="description"><li>Public static <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">checkDependency</span>(<a href="../datatype-string.htm" class="link">string</a> $component, <a href="../datatype-int.htm" class="link">int</a> $type, <a href="../datatype-mixed.htm" class="link">mixed</a> $value)</li><li>Checks for dependencies on PHP versions or extensions <br />
The function as called by the $component component checks for the $type dependency. The dependency $type is compared against the $value. The function aborts the script if the dependency is not matched.</li><li class="smaller">@param string $component</li><li class="smaller">@param int $type</li><li class="smaller">@param mixed $value</li></ul></li><li class="Collapsed" id="f525ccca7eed97"><a href="javascript:void(0);" class="method-pub" target="main">getRepositoryDirectories</a>()<ul class="description"><li>Public static <span class="link">array(string=>ezcBaseRepositoryDirectory)</span> <span class="smallTitle">getRepositoryDirectories</span>()</li><li>Return the list of directories that contain class repositories.<br />
<br />
The path to the eZ components directory is always included in the result array. Each element in the returned array has the format of:<br />
packageDirectory =&gt; ezcBaseRepositoryDirectory</li></ul></li><li class="Collapsed" id="f525ccca7ef263"><a href="javascript:void(0);" class="method-pub" target="main">addClassRepository</a>(<a href="../datatype-string.htm" class="link">string</a> $basePath, <a href="../datatype-string.htm" class="link">string</a> $autoloadDirPath<span class="defVal"> = null</span>, <a href="../datatype-string.htm" class="link">string</a> $prefix<span class="defVal"> = null</span>)<ul class="description"><li>Public static <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">addClassRepository</span>(<a href="../datatype-string.htm" class="link">string</a> $basePath, <a href="../datatype-string.htm" class="link">string</a> $autoloadDirPath<span class="defVal"> = null</span>, <a href="../datatype-string.htm" class="link">string</a> $prefix<span class="defVal"> = null</span>)</li><li>Adds an additional class repository.<br />
<br />
Used for adding class repositoryies outside the eZ components to be loaded by the autoload system.<br />
<br />
This function takes two arguments: $basePath is the base path for the whole class repository and $autoloadDirPath the path where autoload files for this repository are found. The paths in the autoload files are relative to the package directory as specified by the $basePath argument. I.e. class definition file will be searched at location $basePath + path to the class definition file as stored in the autoload file.<br />
<br />
addClassRepository() should be called somewhere in code before external classes are used.<br />
<br />
Example:<br />
Take the following facts:<br />
&lt;ul&gt; &lt;li&gt;there is a class repository stored in the directory &quot;./repos&quot;&lt;/li&gt; &lt;li&gt;autoload files for that repository are stored in &quot;./repos/autoloads&quot;&lt;/li&gt; &lt;li&gt;there are two components in this repository: &quot;Me&quot; and &quot;You&quot;&lt;/li&gt; &lt;li&gt;the &quot;Me&quot; component has the classes &quot;erMyClass1&quot; and &quot;erMyClass2&quot;&lt;/li&gt; &lt;li&gt;the &quot;You&quot; component has the classes &quot;erYourClass1&quot; and &quot;erYourClass2&quot;&lt;/li&gt; &lt;/ul&gt; <br />
In this case you would need to create the following files in &quot;./repos/autoloads&quot;. Please note that the part before _autoload.php in the filename is the first part of the &lt;b&gt;classname&lt;/b&gt;, not considering the all lower-case letter prefix.<br />
<br />
&quot;my_autoload.php&quot;:<br />
&lt;code&gt; &lt;?php return array ( 'erMyClass1' =&gt; 'Me/myclass1.php', 'erMyClass2' =&gt; 'Me/myclass2.php', ); ?&gt; &lt;/code&gt; <br />
&quot;your_autoload.php&quot;:<br />
&lt;code&gt; &lt;?php return array ( 'erYourClass1' =&gt; 'You/yourclass1.php', 'erYourClass2' =&gt; 'You/yourclass2.php', ); ?&gt; &lt;/code&gt; <br />
The directory structure for the external repository is then:<br />
&lt;code&gt; ./repos/autoloads/my_autoload.php ./repos/autoloads/you_autoload.php ./repos/Me/myclass1.php ./repos/Me/myclass2.php ./repos/You/yourclass1.php ./repos/You/yourclass2.php &lt;/code&gt; <br />
To use this repository with the autoload mechanism you have to use the following code:<br />
&lt;code&gt; &lt;?php ezcBase::addClassRepository( './repos', './repos/autoloads' ); $myVar = new erMyClass2(); ?&gt; &lt;/code&gt;</li><li class="smaller">@throws ezcBaseFileNotFoundException if $autoloadDirPath or $basePath do not exist.</li><li class="smaller">@param string $basePath</li><li class="smaller">@param string $autoloadDirPath</li><li class="smaller">@param string $prefix</li></ul></li><li class="Collapsed" id="f525ccca7efd96"><a href="javascript:void(0);" class="method-pub" target="main">getInstallationPath</a>()<ul class="description"><li>Public static <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">getInstallationPath</span>()</li><li>Returns the base path of the eZ Components installation <br />
This method returns the base path, including a trailing directory separator.</li></ul></li><li class="Collapsed" id="f525ccca7f00ab"><a href="javascript:void(0);" class="method-pub" target="main">setRunMode</a>(<a href="../datatype-int.htm" class="link">int</a> $runMode)<ul class="description"><li>Public static <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">setRunMode</span>(<a href="../datatype-int.htm" class="link">int</a> $runMode)</li><li>Sets the development mode to the one specified.</li><li class="smaller">@param int $runMode</li></ul></li><li class="Collapsed" id="f525ccca7f0404"><a href="javascript:void(0);" class="method-pub" target="main">getRunMode</a>()<ul class="description"><li>Public static <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">getRunMode</span>()</li><li>Returns the current development mode.</li></ul></li><li class="Collapsed" id="f525ccca7f0629"><a href="javascript:void(0);" class="method-pub" target="main">inDevMode</a>()<ul class="description"><li>Public static <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">inDevMode</span>()</li><li>Returns true when we are in development mode.</li></ul></li><li class="Collapsed" id="f525ccca7f0875"><a href="javascript:void(0);" class="method-pub" target="main">getInstallMethod</a>()<ul class="description"><li>Public static <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">getInstallMethod</span>()</li><li>Returns the installation method <br />
Possible return values are 'custom', 'devel', 'tarball' and 'pear'. Only 'tarball' and 'pear' are returned for user-installed versions.</li></ul></li></ul>
	</div>
	<div id="footer">Documentation generated on Oct 15, 2013, 0:03:45 -0500 by <a href="http://pear.php.net/package/PHP_UML/" target="_new">PHP_UML</a></div>
</body>
</html>