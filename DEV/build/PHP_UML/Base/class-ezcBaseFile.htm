<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
	<title>class ezcBaseFile</title>
	<link type="text/css" rel="stylesheet" href="../$resources/style.css"/>
	<script type="text/javascript" language="javascript" src="../$resources/treeview.js"></script>
</head>
<body onload="toggler.setupTreeView('MainList');toggler.backToMemorizedState('MainList', 'btnToggle')">
	<ul class="navig">
	<li><a href="javascript:toggler.toggleAll('MainList', 'btnToggle')" class="expandAllBtn" id="btnToggle">Expand all</a></li><li><a href="../help.htm" class="helpBtn">Help</a></li><li><a href="../index-all.htm" class="indexAllBtn">Index</a></li><li><a href="class-ezcBaseFeatures.htm" class="left">Prev class</a></li><li><a href="package-summary.htm" class="top">Package</a></li><li><a href="class-ezcBaseInit.htm" class="right">Next class</a></li>
	</ul>
	<h1 class="class">ezcBaseFile</h1>
	<div id="MainList">
	<div class="description"><p>Class <span class="title">Base\ezcBaseFile</span></p><ul class="description"><li>Provides a selection of static independent methods to provide functionality for file and file system handling.<br />
<br />
This example shows how to use the findRecursive method:<br />
&lt;code&gt; &lt;?php // lists all the files under /etc (including subdirectories) that end in // .conf $confFiles = ezcBaseFile::findRecursive( &quot;/etc&quot;, array( '@\.conf$@' ) ); <br />
// lists all autoload files in the components source tree and excludes the // ones in the autoload subdirectory. Statistics are returned in the $stats // variable which is passed by reference.<br />
$files = ezcBaseFile::findRecursive( &quot;/dat/dev/ezcomponents&quot;, array( '@src/.*_autoload.php$@' ), array( '@/autoload/@' ), $stats ); <br />
// lists all binaries in /bin except the ones starting with a &quot;g&quot; $data = ezcBaseFile::findRecursive( &quot;/bin&quot;, array(), array( '@^/bin/g@' ) ); ?&gt; &lt;/code&gt;</li><li class="smaller">@package Base</li><li class="smaller">@version //autogentag//</li><li class="smaller">@mainclass </li><li>File: DEV/tools/phpcallgraph-0.8.0/lib/ezcomponents/Base/src/file.php</li></ul></div><h2>Functions</h2><ul class="summary"><li class="Collapsed" id="f525ccca8328c0"><a href="javascript:void(0);" class="method-pro" target="main">findRecursiveCallback</a>(<a href="../Base/class-ezcBaseFileFindContext.htm" class="link">Base\ezcBaseFileFindContext</a> $context, <a href="../datatype-string.htm" class="link">string</a> $sourceDir, <a href="../datatype-string.htm" class="link">string</a> $fileName, <span class="link">array(stat)</span> $fileInfo)<ul class="description"><li>Protected static <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">findRecursiveCallback</span>(<a href="../Base/class-ezcBaseFileFindContext.htm" class="link">Base\ezcBaseFileFindContext</a> $context, <a href="../datatype-string.htm" class="link">string</a> $sourceDir, <a href="../datatype-string.htm" class="link">string</a> $fileName, <span class="link">array(stat)</span> $fileInfo)</li><li>This is the callback used by findRecursive to collect data.<br />
<br />
This callback method works together with walkRecursive() and is called for every file/and or directory. The $context is a callback specific container in which data can be stored and shared between the different calls to the callback function. The walkRecursive() function also passes in the full absolute directory in $sourceDir, the filename in $fileName and file information (such as size, modes, types) as an array as returned by PHP's stat() in the $fileInfo parameter.</li><li class="smaller">@param ezcBaseFileFindContext $context</li><li class="smaller">@param string $sourceDir</li><li class="smaller">@param string $fileName</li><li class="smaller">@param array(stat) $fileInfo</li></ul></li><li class="Collapsed" id="f525ccca832efb"><a href="javascript:void(0);" class="method-pub" target="main">walkRecursive</a>(<a href="../datatype-string.htm" class="link">string</a> $sourceDir, <a href="../datatype-array.htm" class="link">array</a> $includeFilters<span class="defVal"> = array()</span>, <a href="../datatype-array.htm" class="link">array</a> $excludeFilters<span class="defVal"> = array()</span>, <span class="link">callback</span> $callback, <a href="../datatype-mixed.htm" class="link">mixed</a> &#38;$callbackContext)<ul class="description"><li>Public static <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">walkRecursive</span>(<a href="../datatype-string.htm" class="link">string</a> $sourceDir, <a href="../datatype-array.htm" class="link">array</a> $includeFilters<span class="defVal"> = array()</span>, <a href="../datatype-array.htm" class="link">array</a> $excludeFilters<span class="defVal"> = array()</span>, <span class="link">callback</span> $callback, <a href="../datatype-mixed.htm" class="link">mixed</a> &#38;$callbackContext)</li><li>Walks files and directories recursively on a file system <br />
This method walks over a directory and calls a callback from every file and directory it finds. You can use $includeFilters to include only specific files, and $excludeFilters to exclude certain files from being returned. The function will always go into subdirectories even if the entry would not have passed the filters.<br />
<br />
The callback is passed in the $callback parameter, and the $callbackContext will be send to the callback function/method as parameter so that you can store data in there that persists with all the calls and recursive calls to this method. It's up to the callback method to do something useful with this. The callback function's parameters are in order:<br />
<br />
&lt;ul&gt; &lt;li&gt;ezcBaseFileFindContext $context&lt;/li&gt; &lt;li&gt;string $sourceDir&lt;/li&gt; &lt;li&gt;string $fileName&lt;/li&gt; &lt;li&gt;array(stat) $fileInfo&lt;/li&gt; &lt;/ul&gt; <br />
See {@see findRecursiveCallback()} for an example of a callback function.<br />
<br />
Filters are regular expressions and are therefore required to have starting and ending delimiters. The Perl Compatible syntax is used as regular expression language.</li><li class="smaller">@param string $sourceDir</li><li class="smaller">@param array(string) $includeFilters</li><li class="smaller">@param array(string) $excludeFilters</li><li class="smaller">@param callback $callback</li><li class="smaller">@param mixed $callbackContext</li><li class="smaller">@throws ezcBaseFileNotFoundException if the $sourceDir directory is not</li><li class="smaller">@throws ezcBaseFilePermissionException if the $sourceDir directory could</li></ul></li><li class="Collapsed" id="f525ccca833ef7"><a href="javascript:void(0);" class="method-pub" target="main">findRecursive</a>(<a href="../datatype-string.htm" class="link">string</a> $sourceDir, <a href="../datatype-array.htm" class="link">array</a> $includeFilters<span class="defVal"> = array()</span>, <a href="../datatype-array.htm" class="link">array</a> $excludeFilters<span class="defVal"> = array()</span>, <span class="link">array()</span> &#38;$statistics<span class="defVal"> = null</span>)<ul class="description"><li>Public static <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">findRecursive</span>(<a href="../datatype-string.htm" class="link">string</a> $sourceDir, <a href="../datatype-array.htm" class="link">array</a> $includeFilters<span class="defVal"> = array()</span>, <a href="../datatype-array.htm" class="link">array</a> $excludeFilters<span class="defVal"> = array()</span>, <span class="link">array()</span> &#38;$statistics<span class="defVal"> = null</span>)</li><li>Finds files recursively on a file system <br />
With this method you can scan the file system for files. You can use $includeFilters to include only specific files, and $excludeFilters to exclude certain files from being returned. The function will always go into subdirectories even if the entry would not have passed the filters.<br />
It uses the {@see walkRecursive()} method to do the actually recursion.<br />
<br />
Filters are regular expressions and are therefore required to have starting and ending delimiters. The Perl Compatible syntax is used as regular expression language.<br />
<br />
If you pass an empty array to the $statistics argument, the function will in details about the number of files found into the 'count' array element, and the total filesize in the 'size' array element. Because this argument is passed by reference, you *have* to pass a variable and you can not pass a constant value such as &quot;array()&quot;.</li><li class="smaller">@param string $sourceDir</li><li class="smaller">@param array(string) $includeFilters</li><li class="smaller">@param array(string) $excludeFilters</li><li class="smaller">@param array() $statistics</li><li class="smaller">@throws ezcBaseFileNotFoundException if the $sourceDir directory is not</li><li class="smaller">@throws ezcBaseFilePermissionException if the $sourceDir directory could</li></ul></li><li class="Collapsed" id="f525ccca83484d"><a href="javascript:void(0);" class="method-pub" target="main">removeRecursive</a>(<a href="../datatype-string.htm" class="link">string</a> $directory)<ul class="description"><li>Public static <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">removeRecursive</span>(<a href="../datatype-string.htm" class="link">string</a> $directory)</li><li>Removes files and directories recursively from a file system <br />
This method recursively removes the $directory and all its contents.<br />
You should be &lt;b&gt;extremely&lt;/b&gt; careful with this method as it has the potential to erase everything that the current user has access to.</li><li class="smaller">@param string $directory</li></ul></li><li class="Collapsed" id="f525ccca834fa1"><a href="javascript:void(0);" class="method-pub" target="main">copyRecursive</a>(<a href="../datatype-string.htm" class="link">string</a> $source, <a href="../datatype-string.htm" class="link">string</a> $destination, <a href="../datatype-int.htm" class="link">int</a> $depth<span class="defVal"> = -1</span>, <a href="../datatype-int.htm" class="link">int</a> $dirMode<span class="defVal"> = 0775</span>, <a href="../datatype-int.htm" class="link">int</a> $fileMode<span class="defVal"> = 0664</span>)<ul class="description"><li>Public static <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">copyRecursive</span>(<a href="../datatype-string.htm" class="link">string</a> $source, <a href="../datatype-string.htm" class="link">string</a> $destination, <a href="../datatype-int.htm" class="link">int</a> $depth<span class="defVal"> = -1</span>, <a href="../datatype-int.htm" class="link">int</a> $dirMode<span class="defVal"> = 0775</span>, <a href="../datatype-int.htm" class="link">int</a> $fileMode<span class="defVal"> = 0664</span>)</li><li>Recursively copy a file or directory.<br />
<br />
Recursively copy a file or directory in $source to the given destination. If a depth is given, the operation will stop, if the given recursion depth is reached. A depth of -1 means no limit, while a depth of 0 means, that only the current file or directory will be copied, without any recursion.<br />
<br />
You may optionally define modes used to create files and directories.</li><li class="smaller">@throws ezcBaseFileNotFoundException</li><li class="smaller">@throws ezcBaseFilePermissionException</li><li class="smaller">@param string $source</li><li class="smaller">@param string $destination</li><li class="smaller">@param int $depth</li><li class="smaller">@param int $dirMode</li><li class="smaller">@param int $fileMode</li></ul></li><li class="Collapsed" id="f525ccca835c19"><a href="javascript:void(0);" class="method-pub" target="main">calculateRelativePath</a>(<a href="../datatype-string.htm" class="link">string</a> $path, <a href="../datatype-string.htm" class="link">string</a> $base)<ul class="description"><li>Public static <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">calculateRelativePath</span>(<a href="../datatype-string.htm" class="link">string</a> $path, <a href="../datatype-string.htm" class="link">string</a> $base)</li><li>Calculates the relative path of the file/directory '$path' to a given $base path.<br />
<br />
$path and $base should be fully absolute paths. This function returns the answer of &quot;How do I go from $base to $path&quot;. If the $path and $base are the same path, the function returns '.'. This method does not touch the filesystem.</li><li class="smaller">@param string $path</li><li class="smaller">@param string $base</li></ul></li><li class="Collapsed" id="f525ccca8364d0"><a href="javascript:void(0);" class="method-pub" target="main">isAbsolutePath</a>(<a href="../datatype-string.htm" class="link">string</a> $path, <a href="../datatype-string.htm" class="link">string</a> $os<span class="defVal"> = null</span>)<ul class="description"><li>Public static <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">isAbsolutePath</span>(<a href="../datatype-string.htm" class="link">string</a> $path, <a href="../datatype-string.htm" class="link">string</a> $os<span class="defVal"> = null</span>)</li><li>Returns whether the passed $path is an absolute path, giving the current $os.<br />
<br />
With the $os parameter you can tell this function to use the semantics for a different operating system to determine whether a path is absolute. The $os argument defaults to the OS that the script is running on.</li><li class="smaller">@param string $path</li><li class="smaller">@param string $os</li></ul></li></ul>
	</div>
	<div id="footer">Documentation generated on Oct 15, 2013, 0:03:45 -0500 by <a href="http://pear.php.net/package/PHP_UML/" target="_new">PHP_UML</a></div>
</body>
</html>