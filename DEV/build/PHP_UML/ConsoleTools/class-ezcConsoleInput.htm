<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
	<title>class ezcConsoleInput</title>
	<link type="text/css" rel="stylesheet" href="../$resources/style.css"/>
	<script type="text/javascript" language="javascript" src="../$resources/treeview.js"></script>
</head>
<body onload="toggler.setupTreeView('MainList');toggler.backToMemorizedState('MainList', 'btnToggle')">
	<ul class="navig">
	<li><a href="javascript:toggler.toggleAll('MainList', 'btnToggle')" class="expandAllBtn" id="btnToggle">Expand all</a></li><li><a href="../help.htm" class="helpBtn">Help</a></li><li><a href="../index-all.htm" class="indexAllBtn">Index</a></li><li><a href="class-ezcConsoleStandardInputValidator.htm" class="left">Prev class</a></li><li><a href="package-summary.htm" class="top">Package</a></li><li><a href="class-ezcConsoleDialogOptions.htm" class="right">Next class</a></li>
	</ul>
	<h1 class="class">ezcConsoleInput</h1>
	<div id="MainList">
	<div class="description"><p>Class <span class="title">ConsoleTools\ezcConsoleInput</span></p><ul class="description"><li>The ezcConsoleInput class handles the given options and arguments on the console.<br />
<br />
This class allows the complete handling of options and arguments submitted to a console based application.<br />
<br />
The next example demonstrate how to capture the console options:<br />
<br />
&lt;code&gt; $optionHandler = new ezcConsoleInput(); <br />
// Register simple parameter -h/--help $optionHandler-&gt;registerOption( new ezcConsoleOption( 'h', 'help' ) ); <br />
// Register complex parameter -f/--file $file = new ezcConsoleOption( 'f', 'file', ezcConsoleInput::TYPE_STRING, null, false, 'Process a file.', 'Processes a single file.' ); $optionHandler-&gt;registerOption( $file ); <br />
// Manipulate parameter -f/--file after registration $file-&gt;multiple = true; <br />
// Register another complex parameter that depends on -f and excludes -h $dir = new ezcConsoleOption( 'd', 'dir', ezcConsoleInput::TYPE_STRING, null, true, 'Process a directory.', 'Processes a complete directory.', array( new ezcConsoleOptionRule( $optionHandler-&gt;getOption( 'f' ) ) ), array( new ezcConsoleOptionRule( $optionHandler-&gt;getOption( 'h' ) ) ) ); $optionHandler-&gt;registerOption( $dir ); <br />
// Register an alias for this parameter $optionHandler-&gt;registerAlias( 'e', 'extended-dir', $dir ); <br />
// Process registered parameters and handle errors try { $optionHandler-&gt;process( array( 'example_input.php', '-h' ) ); } catch ( ezcConsoleOptionException $e ) { echo $e-&gt;getMessage(); exit( 1 ); } <br />
// Process a single parameter $file = $optionHandler-&gt;getOption( 'f' ); if ( $file-&gt;value === false ) { echo &quot;Parameter -{$file-&gt;short}/--{$file-&gt;long} was not submitted.\n&quot;; } elseif ( $file-&gt;value === true ) { echo &quot;Parameter -{$file-&gt;short}/--{$file-&gt;long} was submitted without value.\n&quot;; } else { echo &quot;Parameter -{$file-&gt;short}/--{$file-&gt;long} was submitted with value '&quot;.var_export($file-&gt;value, true).&quot;'.\n&quot;; } <br />
// Process all parameters at once:<br />
foreach ( $optionHandler-&gt;getOptionValues() as $paramShort =&gt; $val ) { switch ( true ) { case $val === false:<br />
echo &quot;Parameter $paramShort was not submitted.\n&quot;; break; case $val === true:<br />
echo &quot;Parameter $paramShort was submitted without a value.\n&quot;; break; case is_array( $val ):<br />
echo &quot;Parameter $paramShort was submitted multiple times with value: '&quot;.implode(', ', $val).&quot;'.\n&quot;; break; default:<br />
echo &quot;Parameter $paramShort was submitted with value: '$val'.\n&quot;; break; } } &lt;/code&gt;</li><li class="smaller">@package ConsoleTools</li><li class="smaller">@version //autogen//</li><li class="smaller">@mainclass </li><li class="smaller">@property ezcConsoleArguments $argumentDefinition Optional argument definition.</li><li>File: DEV/tools/phpcallgraph-0.8.0/lib/ezcomponents/ConsoleTools/src/input.php</li></ul></div><h2>Properties</h2><ul class="summary"><li class="Collapsed" id="TYPE_NONE"><a href="javascript:void(0);" class="property-pub" target="main">TYPE_NONE</a><ul class="description"><li>Public static const <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">TYPE_NONE</span><span class="defVal"> = 1</span></li><li>Option does not carry a value.</li></ul></li><li class="Collapsed" id="TYPE_INT"><a href="javascript:void(0);" class="property-pub" target="main">TYPE_INT</a><ul class="description"><li>Public static const <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">TYPE_INT</span><span class="defVal"> = 2</span></li><li>Option takes an integer value.</li></ul></li><li class="Collapsed" id="TYPE_STRING"><a href="javascript:void(0);" class="property-pub" target="main">TYPE_STRING</a><ul class="description"><li>Public static const <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">TYPE_STRING</span><span class="defVal"> = 3</span></li><li>Option takes a string value.</li></ul></li><li class="Collapsed" id="options"><a href="javascript:void(0);" class="property-pri" target="main">$options</a><ul class="description"><li>Private <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">$options</span><span class="defVal"> = array()</span></li><li>Array of option definitions, indexed by number.<br />
<br />
This array stores the ezcConsoleOption objects representing the options.<br />
<br />
For lookup of an option after its short or long values the attributes {@link ezcConsoleInput::$optionShort} {@link ezcConsoleInput::$optionLong} are used.</li></ul></li><li class="Collapsed" id="optionShort"><a href="javascript:void(0);" class="property-pri" target="main">$optionShort</a><ul class="description"><li>Private <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">$optionShort</span><span class="defVal"> = array()</span></li><li>Short option names.<br />
<br />
Each references a key in {@link ezcConsoleInput::$options}.</li></ul></li><li class="Collapsed" id="optionLong"><a href="javascript:void(0);" class="property-pri" target="main">$optionLong</a><ul class="description"><li>Private <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">$optionLong</span><span class="defVal"> = array()</span></li><li>Long option names.<br />
<br />
Each references a key in {@link ezcConsoleInput::$options}.</li></ul></li><li class="Collapsed" id="arguments"><a href="javascript:void(0);" class="property-pri" target="main">$arguments</a><ul class="description"><li>Private <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">$arguments</span><span class="defVal"> = array()</span></li><li>Arguments, if submitted, are stored here.</li></ul></li><li class="Collapsed" id="processed"><a href="javascript:void(0);" class="property-pri" target="main">$processed</a><ul class="description"><li>Private <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">$processed</span><span class="defVal"> = false</span></li><li>Wether the process() method has already been called.</li></ul></li><li class="Collapsed" id="helpOptionSet"><a href="javascript:void(0);" class="property-pri" target="main">$helpOptionSet</a><ul class="description"><li>Private <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">$helpOptionSet</span><span class="defVal"> = false</span></li><li>Indicates if an option was submitted, that has the isHelpOption flag set.</li></ul></li><li class="Collapsed" id="stringTool"><a href="javascript:void(0);" class="property-pri" target="main">$stringTool</a><ul class="description"><li>Private <a href="../ConsoleTools/class-ezcConsoleStringTool.htm" class="link">ConsoleTools\ezcConsoleStringTool</a> <span class="smallTitle">$stringTool</span></li><li>Tool object for multi-byte encoding safe string operations.</li></ul></li><li class="Collapsed" id="validator"><a href="javascript:void(0);" class="property-pri" target="main">$validator</a><ul class="description"><li>Private <a href="../ConsoleTools/interface-ezcConsoleInputValidator.htm" class="link">ConsoleTools\ezcConsoleInputValidator</a> <span class="smallTitle">$validator</span></li><li>Input validator.</li></ul></li><li class="Collapsed" id="helpGenerator"><a href="javascript:void(0);" class="property-pri" target="main">$helpGenerator</a><ul class="description"><li>Private <a href="../ConsoleTools/interface-ezcConsoleInputHelpGenerator.htm" class="link">ConsoleTools\ezcConsoleInputHelpGenerator</a> <span class="smallTitle">$helpGenerator</span></li><li>Help generator.</li></ul></li><li class="Collapsed" id="properties"><a href="javascript:void(0);" class="property-pro" target="main">$properties</a><ul class="description"><li>Protected <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">$properties</span><span class="defVal"> = array()</span></li><li>Collection of properties.</li></ul></li></ul><h2>Functions</h2><ul class="summary"><li class="Collapsed" id="f525ccca993105"><a href="javascript:void(0);" class="method-pub" target="main">__construct</a>()<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">__construct</span>()</li><li>Creates an input handler.</li></ul></li><li class="Collapsed" id="f525ccca99337d"><a href="javascript:void(0);" class="method-pub" target="main">registerOption</a>(<a href="../ConsoleTools/class-ezcConsoleOption.htm" class="link">ConsoleTools\ezcConsoleOption</a> $option)<ul class="description"><li>Public <a href="../ConsoleTools/class-ezcConsoleOption.htm" class="link">ConsoleTools\ezcConsoleOption</a> <span class="smallTitle">registerOption</span>(<a href="../ConsoleTools/class-ezcConsoleOption.htm" class="link">ConsoleTools\ezcConsoleOption</a> $option)</li><li>Registers the new option $option.<br />
<br />
This method adds the new option $option to your option collection. If already an option with the assigned short or long value exists, an exception will be thrown.</li><li class="smaller">@see ezcConsoleInput::unregisterOption()</li><li class="smaller">@param ezcConsoleOption $option</li><li class="smaller">@return ezcConsoleOption The recently registered option.</li></ul></li><li class="Collapsed" id="f525ccca993995"><a href="javascript:void(0);" class="method-pub" target="main">registerAlias</a>(<a href="../datatype-string.htm" class="link">string</a> $short, <a href="../datatype-string.htm" class="link">string</a> $long, <a href="../ConsoleTools/class-ezcConsoleOption.htm" class="link">ConsoleTools\ezcConsoleOption</a> $option)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">registerAlias</span>(<a href="../datatype-string.htm" class="link">string</a> $short, <a href="../datatype-string.htm" class="link">string</a> $long, <a href="../ConsoleTools/class-ezcConsoleOption.htm" class="link">ConsoleTools\ezcConsoleOption</a> $option)</li><li>Registers an alias for an option.<br />
<br />
Registers a new alias for an existing option. Aliases can be used as if they were a normal option.<br />
<br />
The alias is registered with the short option name $short and the long option name $long. The alias references to the existing option $option.</li><li class="smaller">@see ezcConsoleInput::unregisterAlias()</li><li class="smaller">@param string $short</li><li class="smaller">@param string $long</li><li class="smaller">@param ezcConsoleOption $option</li><li class="smaller">@throws ezcConsoleOptionNotExistsException</li><li class="smaller">@throws ezcConsoleOptionAlreadyRegisteredException</li></ul></li><li class="Collapsed" id="f525ccca994281"><a href="javascript:void(0);" class="method-pub" target="main">registerOptionString</a>(<a href="../datatype-string.htm" class="link">string</a> $optionDef)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">registerOptionString</span>(<a href="../datatype-string.htm" class="link">string</a> $optionDef)</li><li>Registers options according to a string specification.<br />
<br />
Accepts a string to define parameters and registers all parameters as options accordingly. String definition, specified in $optionDef, looks like this:<br />
<br />
&lt;code&gt; [s:|size:][u:|user:][a:|all:] &lt;/code&gt; <br />
This string registers 3 parameters:<br />
-s / --size -u / --user -a / --all</li><li class="smaller">@param string $optionDef</li><li class="smaller">@throws ezcConsoleOptionStringNotWellformedException</li></ul></li><li class="Collapsed" id="f525ccca994bb7"><a href="javascript:void(0);" class="method-pub" target="main">unregisterOption</a>(<a href="../ConsoleTools/class-ezcConsoleOption.htm" class="link">ConsoleTools\ezcConsoleOption</a> $option)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">unregisterOption</span>(<a href="../ConsoleTools/class-ezcConsoleOption.htm" class="link">ConsoleTools\ezcConsoleOption</a> $option)</li><li>Removes an option.<br />
<br />
This function removes an option. All dependencies to that specific option are removed completely from every other registered option.</li><li class="smaller">@see ezcConsoleInput::registerOption()</li><li class="smaller">@param ezcConsoleOption $option The option object to unregister.</li><li class="smaller">@throws ezcConsoleOptionNotExistsException</li></ul></li><li class="Collapsed" id="f525ccca9952b8"><a href="javascript:void(0);" class="method-pub" target="main">unregisterAlias</a>(<a href="../datatype-string.htm" class="link">string</a> $short, <a href="../datatype-string.htm" class="link">string</a> $long)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">unregisterAlias</span>(<a href="../datatype-string.htm" class="link">string</a> $short, <a href="../datatype-string.htm" class="link">string</a> $long)</li><li>Removes an alias to an option.<br />
<br />
This function removes an alias with the short name $short and long name $long.</li><li class="smaller">@see ezcConsoleInput::registerAlias()</li><li class="smaller">@throws ezcConsoleOptionNoAliasException</li><li class="smaller">@param string $short</li><li class="smaller">@param string $long</li><li class="smaller">@todo Check if $short and $long refer to the same option!</li></ul></li><li class="Collapsed" id="f525ccca9959bf"><a href="javascript:void(0);" class="method-pub" target="main">getOption</a>(<a href="../datatype-string.htm" class="link">string</a> $name)<ul class="description"><li>Public <a href="../ConsoleTools/class-ezcConsoleOption.htm" class="link">ConsoleTools\ezcConsoleOption</a> <span class="smallTitle">getOption</span>(<a href="../datatype-string.htm" class="link">string</a> $name)</li><li>Returns the definition object for the option with the name $name.<br />
<br />
This method receives the long or short name of an option and returns the ezcConsoleOption object.</li><li class="smaller">@param string $name Short or long name of the option (without - or --).</li><li class="smaller">@throws ezcConsoleOptionNotExistsException</li></ul></li><li class="Collapsed" id="f525ccca995e5e"><a href="javascript:void(0);" class="method-pub" target="main">process</a>(<a href="../datatype-array.htm" class="link">array</a> $args<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">process</span>(<a href="../datatype-array.htm" class="link">array</a> $args<span class="defVal"> = null</span>)</li><li>Process the input parameters.<br />
<br />
Actually process the input options and arguments according to the actual settings.<br />
<br />
Per default this method uses $argc and $argv for processing. You can override this setting with your own input, if necessary, using the parameters of this method. (Attention, first argument is always the pro gram name itself!) <br />
All exceptions thrown by this method contain an additional attribute &quot;option&quot; which specifies the parameter on which the error occurred.</li><li class="smaller">@param array(int=&gt;string) $args The arguments</li><li class="smaller">@throws ezcConsoleOptionNotExistsException</li><li class="smaller">@throws ezcConsoleOptionDependencyViolationException</li><li class="smaller">@throws ezcConsoleOptionExclusionViolationException</li><li class="smaller">@throws ezcConsoleOptionTypeViolationException</li><li class="smaller">@throws ezcConsoleOptionArgumentsViolationException</li><li class="smaller">@see ezcConsoleOptionException</li></ul></li><li class="Collapsed" id="f525ccca996625"><a href="javascript:void(0);" class="method-pri" target="main">setOptionDefaults</a>()<ul class="description"><li>Private <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">setOptionDefaults</span>()</li><li>Sets defaults for options that have not been submitted.<br />
<br />
Checks all options if they have been submited. If not and a default values is present, this is set as the options value.</li></ul></li><li class="Collapsed" id="f525ccca996995"><a href="javascript:void(0);" class="method-pri" target="main">processOptions</a>(<a href="../datatype-array.htm" class="link">array</a> $args)<ul class="description"><li>Private <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">processOptions</span>(<a href="../datatype-array.htm" class="link">array</a> $args)</li><li>Reads the submitted options from $args array.<br />
<br />
Returns the next index to check for arguments.</li><li class="smaller">@param array(string) $args</li><li class="smaller">@returns int</li><li class="smaller">@throws ezcConsoleOptionNotExistsException</li><li class="smaller">@throws ezcConsoleOptionTooManyValuesException</li><li class="smaller">@throws ezcConsoleOptionTypeViolationException</li><li class="smaller">@throws ezcConsoleOptionMissingValueException</li></ul></li><li class="Collapsed" id="f525ccca99720c"><a href="javascript:void(0);" class="method-pub" target="main">reset</a>()<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">reset</span>()</li><li>Resets all option and argument values.<br />
<br />
This method is called automatically by {@link process()}, if this method is called twice or more, and may also be used to manually reset the values of all registered {@ezcConsoleOption} and {@link ezcConsoleArgument} objects.</li></ul></li><li class="Collapsed" id="f525ccca99750c"><a href="javascript:void(0);" class="method-pub" target="main">hasOption</a>(<a href="../datatype-string.htm" class="link">string</a> $name)<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">hasOption</span>(<a href="../datatype-string.htm" class="link">string</a> $name)</li><li>Returns true if an option with the given name exists, otherwise false.<br />
<br />
Checks if an option with the given name is registered.</li><li class="smaller">@param string $name Short or long name of the option.</li><li class="smaller">@return bool True if option exists, otherwise false.</li></ul></li><li class="Collapsed" id="f525ccca9978a3"><a href="javascript:void(0);" class="method-pub" target="main">getOptions</a>()<ul class="description"><li>Public <span class="link">array(string=>ezcConsoleOption)</span> <span class="smallTitle">getOptions</span>()</li><li>Returns an array of all registered options.<br />
<br />
Returns an array of all registered options in the following format:<br />
&lt;code&gt; array( 0 =&gt; ezcConsoleOption, 1 =&gt; ezcConsoleOption, 2 =&gt; ezcConsoleOption, ...<br />
); &lt;/code&gt;</li><li class="smaller">@return array(string=&gt;ezcConsoleOption) Registered options.</li></ul></li><li class="Collapsed" id="f525ccca997b47"><a href="javascript:void(0);" class="method-pub" target="main">getOptionValues</a>(<a href="../datatype-bool.htm" class="link">bool</a> $longnames<span class="defVal"> = false</span>)<ul class="description"><li>Public <span class="link">array(string=>mixed)</span> <span class="smallTitle">getOptionValues</span>(<a href="../datatype-bool.htm" class="link">bool</a> $longnames<span class="defVal"> = false</span>)</li><li>Returns the values of all submitted options.<br />
<br />
Returns an array of all values submitted to the options. The array is indexed by the parameters short name (excluding the '-' prefix). The array does not contain any parameter, which value is 'false' (meaning: the parameter was not submitted).</li><li class="smaller">@param bool $longnames Wheather to use longnames for indexing.</li></ul></li><li class="Collapsed" id="f525ccca997f92"><a href="javascript:void(0);" class="method-pub" target="main">getArguments</a>()<ul class="description"><li>Public <span class="link">array(int=>string)</span> <span class="smallTitle">getArguments</span>()</li><li>Returns arguments provided to the program.<br />
<br />
This method returns all arguments provided to a program in an int indexed array. Arguments are sorted in the way they are submitted to the program. You can disable arguments through the 'arguments' flag of a parameter, if you want to disallow arguments.<br />
<br />
Arguments are either the last part of the program call (if the last parameter is not a 'multiple' one) or divided via the '--' method which is commonly used on Unix (if the last parameter accepts multiple values this is required).</li><li class="smaller">@return array(int=&gt;string) Arguments.</li></ul></li><li class="Collapsed" id="f525ccca99824f"><a href="javascript:void(0);" class="method-pub" target="main">getHelp</a>(<a href="../datatype-bool.htm" class="link">bool</a> $long<span class="defVal"> = false</span>, <a href="../datatype-array.htm" class="link">array</a> $params<span class="defVal"> = array()</span>, <a href="../datatype-array.htm" class="link">array</a> $paramGrouping<span class="defVal"> = null</span>)<ul class="description"><li>Public <span class="link">array(int=>array(int=>string))</span> <span class="smallTitle">getHelp</span>(<a href="../datatype-bool.htm" class="link">bool</a> $long<span class="defVal"> = false</span>, <a href="../datatype-array.htm" class="link">array</a> $params<span class="defVal"> = array()</span>, <a href="../datatype-array.htm" class="link">array</a> $paramGrouping<span class="defVal"> = null</span>)</li><li>Get help information for your options.<br />
<br />
This method returns an array of help information for your options, indexed by int. Each help info has 2 fields:<br />
<br />
0 =&gt; The options names (&quot;&lt;short&gt; / &lt;long&gt;&quot;) 1 =&gt; The help text (depending on the $long parameter) <br />
The $long options determines if you want to get the short or long help texts. The array returned can be used by {@link ezcConsoleTable}.<br />
<br />
If using the second options, you can filter the options shown in the help output (e.g. to show short help for related options). Provide as simple number indexed array of short and/or long values to set a filter.<br />
<br />
The $paramGrouping option can be used to group options in the help output. The structure of this array parameter is as follows:<br />
<br />
&lt;code&gt; array( 'First section' =&gt; array( 'input', 'output' 'overwrite', ), 'Second section' =&gt; array( 'v', 'h', ), ) &lt;/code&gt; <br />
As can be seen, short option names are possible as well as long ones.<br />
The key of the first array level is the name of the section, which is assigned to an array of options to group under this section. The $params parameter still influences if an option is displayed at all.</li><li class="smaller">@param bool $long</li><li class="smaller">@param array(int=&gt;string) $params</li><li class="smaller">@param array(string=&gt;array(string)) $paramGrouping</li><li class="smaller">@return array(int=&gt;array(int=&gt;string)) Table structure as explained.</li><li class="smaller">@apichange In future versions, the default values of $params will change</li></ul></li><li class="Collapsed" id="f525ccca998c29"><a href="javascript:void(0);" class="method-pri" target="main">getOptionHelpWithoutGrouping</a>(<a href="../datatype-bool.htm" class="link">bool</a> $long, <a href="../datatype-array.htm" class="link">array</a> $params)<ul class="description"><li>Private <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">getOptionHelpWithoutGrouping</span>(<a href="../datatype-bool.htm" class="link">bool</a> $long, <a href="../datatype-array.htm" class="link">array</a> $params)</li><li>Creates the option help array in the original, ungrouped way.<br />
<br />
Creates the original help array generated by {@link getHelp()}. The $long and $params options are the same as they are for this method.</li><li class="smaller">@param bool $long</li><li class="smaller">@param array $params</li></ul></li><li class="Collapsed" id="f525ccca999019"><a href="javascript:void(0);" class="method-pri" target="main">getOptionHelpWithGrouping</a>(<a href="../datatype-mixed.htm" class="link">mixed</a> $long, <a href="../datatype-mixed.htm" class="link">mixed</a> $params, <a href="../datatype-mixed.htm" class="link">mixed</a> $paramGrouping)<ul class="description"><li>Private <span class="link">array()</span> <span class="smallTitle">getOptionHelpWithGrouping</span>(<a href="../datatype-mixed.htm" class="link">mixed</a> $long, <a href="../datatype-mixed.htm" class="link">mixed</a> $params, <a href="../datatype-mixed.htm" class="link">mixed</a> $paramGrouping)</li><li>Generates options helo array with ordering and grouping.</li><li class="smaller">@param mixed $long</li><li class="smaller">@param mixed $params</li><li class="smaller">@param mixed $paramGrouping</li></ul></li><li class="Collapsed" id="f525ccca9996ee"><a href="javascript:void(0);" class="method-pub" target="main">getHelpTable</a>(<a href="../ConsoleTools/class-ezcConsoleTable.htm" class="link">ConsoleTools\ezcConsoleTable</a> $table, <a href="../datatype-bool.htm" class="link">bool</a> $long<span class="defVal"> = false</span>, <a href="../datatype-array.htm" class="link">array</a> $params<span class="defVal"> = array()</span>, <span class="link">array(string=>array(string))</span> $paramGrouping<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../ConsoleTools/class-ezcConsoleTable.htm" class="link">ConsoleTools\ezcConsoleTable</a> <span class="smallTitle">getHelpTable</span>(<a href="../ConsoleTools/class-ezcConsoleTable.htm" class="link">ConsoleTools\ezcConsoleTable</a> $table, <a href="../datatype-bool.htm" class="link">bool</a> $long<span class="defVal"> = false</span>, <a href="../datatype-array.htm" class="link">array</a> $params<span class="defVal"> = array()</span>, <span class="link">array(string=>array(string))</span> $paramGrouping<span class="defVal"> = null</span>)</li><li>Get help information for your options as a table.<br />
<br />
This method provides the information returned by {@link ezcConsoleInput::getHelp()} in a table.<br />
<br />
The $paramGrouping option can be used to group options in the help output. The structure of this array parameter is as follows:<br />
<br />
&lt;code&gt; array( 'First section' =&gt; array( 'input', 'output' 'overwrite', ), 'Second section' =&gt; array( 'v', 'h', ), ) &lt;/code&gt; <br />
As can be seen, short option names are possible as well as long ones.<br />
The key of the first array level is the name of the section, which is assigned to an array of options to group under this section. The $params parameter still influences if an option as displayed at all.</li><li class="smaller">@param ezcConsoleTable $table The table object to fill.</li><li class="smaller">@param bool $long Set this to true for getting the</li><li class="smaller">@param array(int=&gt;string) $params Set of option names to generate help</li><li class="smaller">@param array(string=&gt;array(string)) $paramGrouping</li><li class="smaller">@return ezcConsoleTable The filled table.</li></ul></li><li class="Collapsed" id="f525ccca999eb1"><a href="javascript:void(0);" class="method-pub" target="main">getHelpText</a>(<a href="../datatype-string.htm" class="link">string</a> $programDesc, <a href="../datatype-int.htm" class="link">int</a> $width<span class="defVal"> = 80</span>, <a href="../datatype-bool.htm" class="link">bool</a> $long<span class="defVal"> = false</span>, <a href="../datatype-array.htm" class="link">array</a> $params<span class="defVal"> = null</span>, <span class="link">array(string=>array(string))</span> $paramGrouping<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">getHelpText</span>(<a href="../datatype-string.htm" class="link">string</a> $programDesc, <a href="../datatype-int.htm" class="link">int</a> $width<span class="defVal"> = 80</span>, <a href="../datatype-bool.htm" class="link">bool</a> $long<span class="defVal"> = false</span>, <a href="../datatype-array.htm" class="link">array</a> $params<span class="defVal"> = null</span>, <span class="link">array(string=>array(string))</span> $paramGrouping<span class="defVal"> = null</span>)</li><li>Returns a standard help output for your program.<br />
<br />
This method generates a help text as it's commonly known from Unix command line programs. The output will contain the synopsis, your provided program description and the selected parameter help as also provided by {@link ezcConsoleInput::getHelp()}. The returned string can directly be printed to the console.<br />
<br />
The $paramGrouping option can be used to group options in the help output. The structure of this array parameter is as follows:<br />
<br />
&lt;code&gt; array( 'First section' =&gt; array( 'input', 'output' 'overwrite', ), 'Second section' =&gt; array( 'v', 'h', ), ) &lt;/code&gt; <br />
As can be seen, short option names are possible as well as long ones.<br />
The key of the first array level is the name of the section, which is assigned to an array of options to group under this section. The $params parameter still influences if an option as displayed at all.</li><li class="smaller">@param string $programDesc The description of your program.</li><li class="smaller">@param int $width The width to adjust the output text to.</li><li class="smaller">@param bool $long Set this to true for getting the long</li><li class="smaller">@param array(int=&gt;string) $params Set of option names to generate help</li><li class="smaller">@param array(string=&gt;array(string)) $paramGrouping</li><li class="smaller">@return string The generated help text.</li></ul></li><li class="Collapsed" id="f525ccca99aaee"><a href="javascript:void(0);" class="method-pub" target="main">getSynopsis</a>(<a href="../datatype-array.htm" class="link">array</a> $optionNames<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">getSynopsis</span>(<a href="../datatype-array.htm" class="link">array</a> $optionNames<span class="defVal"> = null</span>)</li><li>Returns the synopsis string for the program.<br />
<br />
This gives you a synopsis definition for the options and arguments defined with this instance of ezcConsoleInput. You can filter the options named in the synopsis by submitting their short names in an array as the parameter of this method. If the parameter $optionNames is set, only those options are listed in the synopsis.</li><li class="smaller">@param array(int=&gt;string) $optionNames</li></ul></li><li class="Collapsed" id="f525ccca99ae42"><a href="javascript:void(0);" class="method-pub" target="main">helpOptionSet</a>()<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">helpOptionSet</span>()</li><li>Returns if a help option was set.<br />
This method returns if an option was submitted, which was defined to be a help option, using the isHelpOption flag.</li><li class="smaller">@return bool If a help option was set.</li></ul></li><li class="Collapsed" id="f525ccca99b074"><a href="javascript:void(0);" class="method-pub" target="main">__get</a>(<a href="../datatype-string.htm" class="link">string</a> $propertyName)<ul class="description"><li>Public <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">__get</span>(<a href="../datatype-string.htm" class="link">string</a> $propertyName)</li><li>Property read access.</li><li class="smaller">@throws ezcBasePropertyNotFoundException</li><li class="smaller">@param string $propertyName Name of the property.</li><li class="smaller">@return mixed Value of the property or null.</li><li class="smaller">@ignore </li></ul></li><li class="Collapsed" id="f525ccca99b492"><a href="javascript:void(0);" class="method-pub" target="main">__set</a>(<a href="../datatype-string.htm" class="link">string</a> $propertyName, <a href="../datatype-string.htm" class="link">string</a> $propertyValue)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">__set</span>(<a href="../datatype-string.htm" class="link">string</a> $propertyName, <a href="../datatype-string.htm" class="link">string</a> $propertyValue)</li><li>Property set access.</li><li class="smaller">@param string $propertyName</li><li class="smaller">@param string $propertyValue</li><li class="smaller">@ignore </li></ul></li><li class="Collapsed" id="f525ccca99baca"><a href="javascript:void(0);" class="method-pub" target="main">__isset</a>(<a href="../datatype-string.htm" class="link">string</a> $propertyName)<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">__isset</span>(<a href="../datatype-string.htm" class="link">string</a> $propertyName)</li><li>Property isset access.</li><li class="smaller">@param string $propertyName Name of the property.</li><li class="smaller">@return bool True if the property is set, otherwise false.</li><li class="smaller">@ignore </li></ul></li><li class="Collapsed" id="f525ccca99be4e"><a href="javascript:void(0);" class="method-pro" target="main">createOptionSynopsis</a>(<a href="../ConsoleTools/class-ezcConsoleOption.htm" class="link">ConsoleTools\ezcConsoleOption</a> $option, <span class="link">array(int=>string)</span> &#38;$usedOptions, <a href="../datatype-int.htm" class="link">int</a> $depth<span class="defVal"> = 0</span>)<ul class="description"><li>Protected <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">createOptionSynopsis</span>(<a href="../ConsoleTools/class-ezcConsoleOption.htm" class="link">ConsoleTools\ezcConsoleOption</a> $option, <span class="link">array(int=>string)</span> &#38;$usedOptions, <a href="../datatype-int.htm" class="link">int</a> $depth<span class="defVal"> = 0</span>)</li><li>Returns the synopsis string for a single option and its dependencies.<br />
<br />
This method returns a part of the program synopsis, specifically for a certain parameter. The method recursively adds depending parameters up to the 2nd depth level to the synopsis. The second parameter is used to store the short names of all options that have already been used in the synopsis (to avoid adding an option twice). The 3rd parameter determines the actual deps in the option dependency recursion to terminate that after 2 recursions.</li><li class="smaller">@param ezcConsoleOption $option The option to include.</li><li class="smaller">@param array(int=&gt;string) $usedOptions Array of used option short names.</li><li class="smaller">@param int $depth Current recursion depth.</li><li class="smaller">@return string The synopsis for this parameter.</li><li class="smaller">@apichange This method is deprecates. Implement your own {@link</li></ul></li><li class="Collapsed" id="f525ccca99ca52"><a href="javascript:void(0);" class="method-pri" target="main">processOption</a>(<a href="../datatype-array.htm" class="link">array</a> $args, <a href="../datatype-int.htm" class="link">int</a> &#38;$i)<ul class="description"><li>Private <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">processOption</span>(<a href="../datatype-array.htm" class="link">array</a> $args, <a href="../datatype-int.htm" class="link">int</a> &#38;$i)</li><li>Process an option.<br />
<br />
This method does the processing of a single option.</li><li class="smaller">@param array(int=&gt;string) $args The arguments array.</li><li class="smaller">@param int $i The current position in the arguments array.</li><li class="smaller">@throws ezcConsoleOptionTooManyValuesException</li><li class="smaller">@throws ezcConsoleOptionTypeViolationException</li><li class="smaller">@throws ezcConsoleOptionMissingValueException</li></ul></li><li class="Collapsed" id="f525ccca99d65d"><a href="javascript:void(0);" class="method-pri" target="main">processArguments</a>(<a href="../datatype-array.htm" class="link">array</a> $args, <a href="../datatype-int.htm" class="link">int</a> &#38;$i)<ul class="description"><li>Private <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">processArguments</span>(<a href="../datatype-array.htm" class="link">array</a> $args, <a href="../datatype-int.htm" class="link">int</a> &#38;$i)</li><li>Process arguments given to the program.</li><li class="smaller">@param array(int=&gt;string) $args The arguments array.</li><li class="smaller">@param int $i Current index in arguments array.</li></ul></li><li class="Collapsed" id="f525ccca99e131"><a href="javascript:void(0);" class="method-pro" target="main">argumentsAllowed</a>()<ul class="description"><li>Protected <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">argumentsAllowed</span>()</li><li>Returns if arguments are allowed with the current option submition.</li><li class="smaller">@return bool If arguments allowed.</li></ul></li><li class="Collapsed" id="f525ccca99e488"><a href="javascript:void(0);" class="method-pri" target="main">checkRules</a>()<ul class="description"><li>Private <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">checkRules</span>()</li><li>Check the rules that may be associated with an option.<br />
<br />
Options are allowed to have rules associated for dependencies to other options and exclusion of other options or arguments. This method processes the checks.</li><li class="smaller">@throws ezcConsoleException</li></ul></li><li class="Collapsed" id="f525ccca99e7e4"><a href="javascript:void(0);" class="method-pri" target="main">isCorrectType</a>(<a href="../datatype-int.htm" class="link">int</a> $type, <a href="../datatype-string.htm" class="link">string</a> &#38;$val)<ul class="description"><li>Private <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">isCorrectType</span>(<a href="../datatype-int.htm" class="link">int</a> $type, <a href="../datatype-string.htm" class="link">string</a> &#38;$val)</li><li>Checks if a value is of a given type. Converts the value to the correct PHP type on success.</li><li class="smaller">@param int $type The type to check for. One of self::TYPE_*.</li><li class="smaller">@param string $val The value to check. Will possibly altered!</li><li class="smaller">@return bool True on succesful check, otherwise false.</li></ul></li><li class="Collapsed" id="f525ccca99ed57"><a href="javascript:void(0);" class="method-pri" target="main">preprocessLongOption</a>(<a href="../datatype-array.htm" class="link">array</a> &#38;$args, <a href="../datatype-int.htm" class="link">int</a> $i)<ul class="description"><li>Private <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">preprocessLongOption</span>(<a href="../datatype-array.htm" class="link">array</a> &#38;$args, <a href="../datatype-int.htm" class="link">int</a> $i)</li><li>Split parameter and value for long option names.<br />
<br />
This method checks for long options, if the value is passed using =. If this is the case parameter and value get split and replaced in the arguments array.</li><li class="smaller">@param array(int=&gt;string) $args The arguments array</li><li class="smaller">@param int $i Current arguments array position</li></ul></li></ul>
	</div>
	<div id="footer">Documentation generated on Oct 15, 2013, 0:03:45 -0500 by <a href="http://pear.php.net/package/PHP_UML/" target="_new">PHP_UML</a></div>
</body>
</html>