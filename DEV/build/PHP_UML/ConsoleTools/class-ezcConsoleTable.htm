<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
	<title>class ezcConsoleTable</title>
	<link type="text/css" rel="stylesheet" href="../$resources/style.css"/>
	<script type="text/javascript" language="javascript" src="../$resources/treeview.js"></script>
</head>
<body onload="toggler.setupTreeView('MainList');toggler.backToMemorizedState('MainList', 'btnToggle')">
	<ul class="navig">
	<li><a href="javascript:toggler.toggleAll('MainList', 'btnToggle')" class="expandAllBtn" id="btnToggle">Expand all</a></li><li><a href="../help.htm" class="helpBtn">Help</a></li><li><a href="../index-all.htm" class="indexAllBtn">Index</a></li><li><a href="class-ezcConsoleTableRow.htm" class="left">Prev class</a></li><li><a href="package-summary.htm" class="top">Package</a></li><li><a href="class-ezcConsoleStringTool.htm" class="right">Next class</a></li>
	</ul>
	<h1 class="class">ezcConsoleTable</h1>
	<div id="MainList">
	<div class="description"><p>Class <span class="title">ConsoleTools\ezcConsoleTable</span> implements <a href="../interface-Countable.htm" class="link2">Countable</a>, <a href="../interface-Iterator.htm" class="link2">Iterator</a>, <span class="link">ArrayAccess</span> </p><ul class="description"><li>Creating tables to be printed to the console.<br />
<br />
Every ezcConsoleTable object can be accessed as if it was a multidimensional, numerically indexed array. The first dimension represents the rows of the table, so $table[0] gives you access to the first row of the table, which is represented by a {@link ezcConsoleTableRow} object. You can access its properties directly, using e.g. $table[0]-&gt;format. The second dimension gives you direct access to the cells of your table, like $table[0][0] accesses the first cell in the first row of your table. You can access its properties diretly here, too. This works like e.g. $table[0][0]-&gt;format. Table row and cell objects are created on the fly, when you access them for the first time.<br />
You can also create them as if you simply create new array elements. E.g.<br />
$table[] creates a new row in the table.<br />
<br />
&lt;code&gt; // Initialize the console output handler $out = new ezcConsoleOutput(); // Define a new format &quot;headline&quot; $out-&gt;formats-&gt;headline-&gt;color = 'red'; $out-&gt;formats-&gt;headline-&gt;style = array( 'bold' ); // Define a new format &quot;sum&quot; $out-&gt;formats-&gt;sum-&gt;color = 'blue'; $out-&gt;formats-&gt;sum-&gt;style = array( 'negative' ); <br />
// Create a new table $table = new ezcConsoleTable( $out, 60 ); <br />
// Create first row and in it the first cell $table[0][0]-&gt;content = 'Headline 1'; <br />
// Create 3 more cells in row 0 for ( $i = 2; $i &lt; 5; $i++ ) { $table[0][]-&gt;content = &quot;Headline $i&quot;; } <br />
$data = array( 1, 2, 3, 4 ); <br />
// Create some more data in the table...<br />
foreach ( $data as $value ) { // Create a new row each time and set it's contents to the actual value $table[][0]-&gt;content = $value; } <br />
// Set another border format for our headline row $table[0]-&gt;borderFormat = 'headline'; <br />
// Set the content format for all cells of the 3rd row to &quot;sum&quot; $table[2]-&gt;format = 'sum'; <br />
$table-&gt;outputTable(); &lt;/code&gt;</li><li class="smaller">@property ezcConsoleTableOptions $options</li><li class="smaller">@property int $width</li><li class="smaller">@see ezcConsoleOutput</li><li class="smaller">@package ConsoleTools</li><li class="smaller">@version //autogen//</li><li class="smaller">@mainclass </li><li>All implemented interfaces: <a href="../interface-Countable.htm" class="link2">Countable</a>, <a href="../interface-Iterator.htm" class="link2">Iterator</a></li><li>File: DEV/tools/phpcallgraph-0.8.0/lib/ezcomponents/ConsoleTools/src/table.php</li></ul></div><h2>Properties</h2><ul class="summary"><li class="Collapsed" id="WRAP_AUTO"><a href="javascript:void(0);" class="property-pub" target="main">WRAP_AUTO</a><ul class="description"><li>Public static const <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">WRAP_AUTO</span><span class="defVal"> = 1</span></li><li>Automatically wrap text to fit into a column.</li><li class="smaller">@see ezcConsoleTable::$options</li></ul></li><li class="Collapsed" id="WRAP_NONE"><a href="javascript:void(0);" class="property-pub" target="main">WRAP_NONE</a><ul class="description"><li>Public static const <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">WRAP_NONE</span><span class="defVal"> = 2</span></li><li>Do not wrap text. Columns will be extended to fit the largest text.<br />
ATTENTION: This is risky!</li><li class="smaller">@see ezcConsoleTable::$options</li></ul></li><li class="Collapsed" id="WRAP_CUT"><a href="javascript:void(0);" class="property-pub" target="main">WRAP_CUT</a><ul class="description"><li>Public static const <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">WRAP_CUT</span><span class="defVal"> = 3</span></li><li>Text will be cut to fit into a column.</li><li class="smaller">@see ezcConsoleTable::$options</li></ul></li><li class="Collapsed" id="ALIGN_DEFAULT"><a href="javascript:void(0);" class="property-pub" target="main">ALIGN_DEFAULT</a><ul class="description"><li>Public static const <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">ALIGN_DEFAULT</span><span class="defVal"> = -1</span></li><li>Align text in the default direction.</li></ul></li><li class="Collapsed" id="ALIGN_LEFT"><a href="javascript:void(0);" class="property-pub" target="main">ALIGN_LEFT</a><ul class="description"><li>Public static const <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">ALIGN_LEFT</span><span class="defVal"> = STR_PAD_RIGHT</span></li><li>Align text in cells to the right.</li></ul></li><li class="Collapsed" id="ALIGN_RIGHT"><a href="javascript:void(0);" class="property-pub" target="main">ALIGN_RIGHT</a><ul class="description"><li>Public static const <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">ALIGN_RIGHT</span><span class="defVal"> = STR_PAD_LEFT</span></li><li>Align text in cells to the left.</li></ul></li><li class="Collapsed" id="ALIGN_CENTER"><a href="javascript:void(0);" class="property-pub" target="main">ALIGN_CENTER</a><ul class="description"><li>Public static const <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">ALIGN_CENTER</span><span class="defVal"> = STR_PAD_BOTH</span></li><li>Align text in cells to the center.</li></ul></li><li class="Collapsed" id="WIDTH_FIXED"><a href="javascript:void(0);" class="property-pub" target="main">WIDTH_FIXED</a><ul class="description"><li>Public static const <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">WIDTH_FIXED</span><span class="defVal"> = 1</span></li><li>The width given by settings must be used even if the data allows it smaller.</li></ul></li><li class="Collapsed" id="WIDTH_MAX"><a href="javascript:void(0);" class="property-pub" target="main">WIDTH_MAX</a><ul class="description"><li>Public static const <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">WIDTH_MAX</span><span class="defVal"> = 2</span></li><li>The width given by settings is a maximum value, if data allows it, the table gets smaller.</li></ul></li><li class="Collapsed" id="properties"><a href="javascript:void(0);" class="property-pro" target="main">$properties</a><ul class="description"><li>Protected <span class="link">array(string=>mixed)</span> <span class="smallTitle">$properties</span></li><li>Container to hold the properties</li></ul></li><li class="Collapsed" id="outputHandler"><a href="javascript:void(0);" class="property-pro" target="main">$outputHandler</a><ul class="description"><li>Protected <a href="../ConsoleTools/class-ezcConsoleOutput.htm" class="link">ConsoleTools\ezcConsoleOutput</a> <span class="smallTitle">$outputHandler</span></li><li>The ezcConsoleOutput object to use.</li></ul></li><li class="Collapsed" id="rows"><a href="javascript:void(0);" class="property-pro" target="main">$rows</a><ul class="description"><li>Protected <span class="link">array(int=>ezcConsoleTableRow)</span> <span class="smallTitle">$rows</span></li><li>Collection of the rows that are contained in the table.</li></ul></li><li class="Collapsed" id="stringTool"><a href="javascript:void(0);" class="property-pri" target="main">$stringTool</a><ul class="description"><li>Private <a href="../ConsoleTools/class-ezcConsoleStringTool.htm" class="link">ConsoleTools\ezcConsoleStringTool</a> <span class="smallTitle">$stringTool</span></li><li>Tool object for multi-byte encoding safe string operations.</li></ul></li></ul><h2>Functions</h2><ul class="summary"><li class="Collapsed" id="f525cccaa104a8"><a href="javascript:void(0);" class="method-pub" target="main">__construct</a>(<a href="../ConsoleTools/class-ezcConsoleOutput.htm" class="link">ConsoleTools\ezcConsoleOutput</a> $outHandler, <a href="../datatype-int.htm" class="link">int</a> $width, <a href="../datatype-array.htm" class="link">array</a> $options<span class="defVal"> = array()</span>)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">__construct</span>(<a href="../ConsoleTools/class-ezcConsoleOutput.htm" class="link">ConsoleTools\ezcConsoleOutput</a> $outHandler, <a href="../datatype-int.htm" class="link">int</a> $width, <a href="../datatype-array.htm" class="link">array</a> $options<span class="defVal"> = array()</span>)</li><li>Creates a new table.</li><li class="smaller">@param ezcConsoleOutput $outHandler Output handler to utilize</li><li class="smaller">@param int $width Overall width of the table (chars).</li><li class="smaller">@param array $options Options</li><li class="smaller">@see ezcConsoleTable::$options</li><li class="smaller">@throws ezcBaseValueException On an invalid setting.</li></ul></li><li class="Collapsed" id="f525cccaa10c2e"><a href="javascript:void(0);" class="method-pub" target="main">setOptions</a>(<a href="../datatype-array.htm" class="link">array</a> $options<span class="defVal"> = array()</span>)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">setOptions</span>(<a href="../datatype-array.htm" class="link">array</a> $options<span class="defVal"> = array()</span>)</li><li>Set new options.<br />
This method allows you to change the options of the table.</li><li class="smaller">@param ezcConsoleTableOptions $options The options to set.</li><li class="smaller">@throws ezcBaseSettingNotFoundException</li><li class="smaller">@throws ezcBaseSettingValueException</li><li class="smaller">@throws ezcBaseValueException</li></ul></li><li class="Collapsed" id="f525cccaa11163"><a href="javascript:void(0);" class="method-pub" target="main">getOptions</a>()<ul class="description"><li>Public <a href="../ConsoleTools/class-ezcConsoleTableOptions.htm" class="link">ConsoleTools\ezcConsoleTableOptions</a> <span class="smallTitle">getOptions</span>()</li><li>Returns the current options.<br />
Returns the options currently set for this table.</li><li class="smaller">@return ezcConsoleTableOptions The current options.</li></ul></li><li class="Collapsed" id="f525cccaa113aa"><a href="javascript:void(0);" class="method-pub" target="main">getTable</a>()<ul class="description"><li>Public <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">getTable</span>()</li><li>Returns the table in an array.<br />
<br />
Returns the entire table as an array of printable lines. Each element of the array represents a physical line of the drawn table, including all borders and stuff, so you can simply print the table using &lt;code&gt; echo implode( &quot;\n&quot; , $table-&gt;getTable() ):<br />
&lt;/code&gt; which is basically what {@link ezcConsoleTable::outputTable()} does.</li><li class="smaller">@return array An array representation of the table.</li></ul></li><li class="Collapsed" id="f525cccaa11630"><a href="javascript:void(0);" class="method-pub" target="main">outputTable</a>()<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">outputTable</span>()</li><li>Output the table.<br />
Prints the complete table to the console.</li></ul></li><li class="Collapsed" id="f525cccaa1187f"><a href="javascript:void(0);" class="method-pub" target="main">__toString</a>()<ul class="description"><li>Public <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">__toString</span>()</li><li>Returns the table in a string.</li></ul></li><li class="Collapsed" id="f525cccaa11acb"><a href="javascript:void(0);" class="method-pub" target="main">offsetExists</a>(<a href="../datatype-int.htm" class="link">int</a> $offset)<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">offsetExists</span>(<a href="../datatype-int.htm" class="link">int</a> $offset)</li><li>Returns if the given offset exists.<br />
This method is part of the ArrayAccess interface to allow access to the data of this object as if it was an array.</li><li class="smaller">@param int $offset The offset to check.</li><li class="smaller">@return bool True when the offset exists, otherwise false.</li><li class="smaller">@throws ezcBaseValueException</li></ul></li><li class="Collapsed" id="f525cccaa11f11"><a href="javascript:void(0);" class="method-pub" target="main">offsetGet</a>(<a href="../datatype-int.htm" class="link">int</a> $offset)<ul class="description"><li>Public <a href="../ConsoleTools/class-ezcConsoleTableCell.htm" class="link">ConsoleTools\ezcConsoleTableCell</a> <span class="smallTitle">offsetGet</span>(<a href="../datatype-int.htm" class="link">int</a> $offset)</li><li>Returns the element with the given offset.<br />
This method is part of the ArrayAccess interface to allow access to the data of this object as if it was an array. In case of the ezcConsoleTable class this method always returns a valid row object since it creates them on the fly, if a given item does not exist.</li><li class="smaller">@param int $offset The offset to check.</li><li class="smaller">@throws ezcBaseValueException</li></ul></li><li class="Collapsed" id="f525cccaa1245f"><a href="javascript:void(0);" class="method-pub" target="main">offsetSet</a>(<a href="../datatype-int.htm" class="link">int</a> $offset, <a href="../ConsoleTools/class-ezcConsoleTableRow.htm" class="link">ConsoleTools\ezcConsoleTableRow</a> $value)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">offsetSet</span>(<a href="../datatype-int.htm" class="link">int</a> $offset, <a href="../ConsoleTools/class-ezcConsoleTableRow.htm" class="link">ConsoleTools\ezcConsoleTableRow</a> $value)</li><li>Set the element with the given offset.<br />
This method is part of the ArrayAccess interface to allow access to the data of this object as if it was an array.</li><li class="smaller">@param int $offset The offset to assign an item to.</li><li class="smaller">@param ezcConsoleTableRow $value The row to assign.</li><li class="smaller">@throws ezcBaseValueException</li><li class="smaller">@throws ezcBaseValueException</li></ul></li><li class="Collapsed" id="f525cccaa12abe"><a href="javascript:void(0);" class="method-pub" target="main">offsetUnset</a>(<a href="../datatype-int.htm" class="link">int</a> $offset)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">offsetUnset</span>(<a href="../datatype-int.htm" class="link">int</a> $offset)</li><li>Unset the element with the given offset.<br />
This method is part of the ArrayAccess interface to allow access to the data of this object as if it was an array.</li><li class="smaller">@param int $offset The offset to unset the value for.</li><li class="smaller">@throws ezcBaseValueException</li></ul></li><li class="Collapsed" id="f525cccaa12f48"><a href="javascript:void(0);" class="method-pub" target="main">count</a>()<ul class="description"><li>Public <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">count</span>()</li><li>Returns the number of cells in the row.<br />
This method is part of the Countable interface to allow the usage of PHP's count() function to check how many cells this row has.</li><li class="smaller">@return int Number of cells in this row.</li></ul></li><li class="Collapsed" id="f525cccaa1322e"><a href="javascript:void(0);" class="method-pub" target="main">current</a>()<ul class="description"><li>Public <a href="../ConsoleTools/class-ezcConsoleTableCell.htm" class="link">ConsoleTools\ezcConsoleTableCell</a> <span class="smallTitle">current</span>()</li><li>Returns the currently selected cell.<br />
This method is part of the Iterator interface to allow access to the cells of this row by iterating over it like an array (e.g. using foreach).</li><li class="smaller">@return ezcConsoleTableCell The currently selected cell.</li></ul></li><li class="Collapsed" id="f525cccaa1349b"><a href="javascript:void(0);" class="method-pub" target="main">key</a>()<ul class="description"><li>Public <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">key</span>()</li><li>Returns the key of the currently selected cell.<br />
This method is part of the Iterator interface to allow access to the cells of this row by iterating over it like an array (e.g. using foreach).</li><li class="smaller">@return int The key of the currently selected cell.</li></ul></li><li class="Collapsed" id="f525cccaa136f7"><a href="javascript:void(0);" class="method-pub" target="main">next</a>()<ul class="description"><li>Public <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">next</span>()</li><li>Returns the next cell and selects it or false on the last cell.<br />
This method is part of the Iterator interface to allow access to the cells of this row by iterating over it like an array (e.g. using foreach).</li><li class="smaller">@return mixed ezcConsoleTableCell if the next cell exists, or false.</li></ul></li><li class="Collapsed" id="f525cccaa13954"><a href="javascript:void(0);" class="method-pub" target="main">rewind</a>()<ul class="description"><li>Public <a href="../ConsoleTools/class-ezcConsoleTableCell.htm" class="link">ConsoleTools\ezcConsoleTableCell</a> <span class="smallTitle">rewind</span>()</li><li>Selects the very first cell and returns it.<br />
This method is part of the Iterator interface to allow access to the cells of this row by iterating over it like an array (e.g. using foreach).</li><li class="smaller">@return ezcConsoleTableCell The very first cell of this row.</li></ul></li><li class="Collapsed" id="f525cccaa13bb2"><a href="javascript:void(0);" class="method-pub" target="main">valid</a>()<ul class="description"><li>Public <a href="../ConsoleTools/class-ezcConsoleTableCell.htm" class="link">ConsoleTools\ezcConsoleTableCell</a> <span class="smallTitle">valid</span>()</li><li>Returns if the current cell is valid.<br />
This method is part of the Iterator interface to allow access to the cells of this row by iterating over it like an array (e.g. using foreach).</li><li class="smaller">@return ezcConsoleTableCell The very first cell of this row.</li></ul></li><li class="Collapsed" id="f525cccaa13e27"><a href="javascript:void(0);" class="method-pub" target="main">__get</a>(<a href="../datatype-string.htm" class="link">string</a> $key)<ul class="description"><li>Public <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">__get</span>(<a href="../datatype-string.htm" class="link">string</a> $key)</li><li>Property read access.</li><li class="smaller">@param string $key Name of the property.</li><li class="smaller">@return mixed Value of the property or null.</li><li class="smaller">@throws ezcBasePropertyNotFoundException</li><li class="smaller">@ignore </li></ul></li><li class="Collapsed" id="f525cccaa14284"><a href="javascript:void(0);" class="method-pub" target="main">__set</a>(<a href="../datatype-string.htm" class="link">string</a> $key, <a href="../datatype-mixed.htm" class="link">mixed</a> $val)<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">__set</span>(<a href="../datatype-string.htm" class="link">string</a> $key, <a href="../datatype-mixed.htm" class="link">mixed</a> $val)</li><li>Property write access.</li><li class="smaller">@param string $key Name of the property.</li><li class="smaller">@param mixed $val The value for the property.</li><li class="smaller">@throws ezcBasePropertyNotFoundException</li><li class="smaller">@throws ezcBaseValueException</li><li class="smaller">@ignore </li></ul></li><li class="Collapsed" id="f525cccaa148f8"><a href="javascript:void(0);" class="method-pub" target="main">__isset</a>(<a href="../datatype-string.htm" class="link">string</a> $key)<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">__isset</span>(<a href="../datatype-string.htm" class="link">string</a> $key)</li><li>Property isset access.</li><li class="smaller">@param string $key Name of the property.</li><li class="smaller">@return bool True is the property is set, otherwise false.</li><li class="smaller">@ignore </li></ul></li><li class="Collapsed" id="f525cccaa14d0d"><a href="javascript:void(0);" class="method-pri" target="main">generateTable</a>()<ul class="description"><li>Private <span class="link">array(int=>string)</span> <span class="smallTitle">generateTable</span>()</li><li>Generate the complete table as an array.</li><li class="smaller">@return array(int=&gt;string) The table.</li></ul></li><li class="Collapsed" id="f525cccaa15445"><a href="javascript:void(0);" class="method-pri" target="main">generateBorder</a>(<span class="link">array(int=>int)</span> $colWidth, <a href="../datatype-string.htm" class="link">string</a> $format)<ul class="description"><li>Private <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">generateBorder</span>(<span class="link">array(int=>int)</span> $colWidth, <a href="../datatype-string.htm" class="link">string</a> $format)</li><li>Generate top/bottom borders of rows.</li><li class="smaller">@param array(int=&gt;int) $colWidth Array of column width.</li><li class="smaller">@param string $format Format name.</li><li class="smaller">@return string The Border string.</li></ul></li><li class="Collapsed" id="f525cccaa15a48"><a href="javascript:void(0);" class="method-pri" target="main">generateRow</a>(<span class="link">array(int=>string)</span> $cells, <span class="link">array(int=>int)</span> $colWidth, <a href="../ConsoleTools/class-ezcConsoleTableRow.htm" class="link">ConsoleTools\ezcConsoleTableRow</a> $row)<ul class="description"><li>Private <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">generateRow</span>(<span class="link">array(int=>string)</span> $cells, <span class="link">array(int=>int)</span> $colWidth, <a href="../ConsoleTools/class-ezcConsoleTableRow.htm" class="link">ConsoleTools\ezcConsoleTableRow</a> $row)</li><li>Generate a single physical row.<br />
This method generates the string for a single physical table row.</li><li class="smaller">@param array(int=&gt;string) $cells Cells of the row.</li><li class="smaller">@param array(int=&gt;int) $colWidth Calculated columns widths.</li><li class="smaller">@param ezcConsoleTableRow $row The row to generate.</li><li class="smaller">@return string The row.</li></ul></li><li class="Collapsed" id="f525cccaa1624e"><a href="javascript:void(0);" class="method-pri" target="main">determineAlign</a>(<a href="../ConsoleTools/class-ezcConsoleTableRow.htm" class="link">ConsoleTools\ezcConsoleTableRow</a> $row, <a href="../datatype-int.htm" class="link">int</a> $cellId<span class="defVal"> = 0</span>)<ul class="description"><li>Private <a href="../datatype-int.htm" class="link">int</a> <span class="smallTitle">determineAlign</span>(<a href="../ConsoleTools/class-ezcConsoleTableRow.htm" class="link">ConsoleTools\ezcConsoleTableRow</a> $row, <a href="../datatype-int.htm" class="link">int</a> $cellId<span class="defVal"> = 0</span>)</li><li>Determine the alignment of a cell.<br />
Walks the inheritance path upwards to determine the alignment of a cell. Checks first, if the cell has it's own alignment (apart from ezcConsoleTable::ALIGN_DEFAULT). If not, checks the row for an alignment setting and uses the default alignment if not found.</li><li class="smaller">@param ezcConsoleTableRow $row The row this cell belongs to.</li><li class="smaller">@param int $cellId Index of the desired cell.</li><li class="smaller">@return int An alignement constant (ezcConsoleTable::ALIGN_*).</li></ul></li><li class="Collapsed" id="f525cccaa1678c"><a href="javascript:void(0);" class="method-pri" target="main">determineFormat</a>(<a href="../ConsoleTools/class-ezcConsoleTableRow.htm" class="link">ConsoleTools\ezcConsoleTableRow</a> $row, <a href="../datatype-int.htm" class="link">int</a> $cellId)<ul class="description"><li>Private <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">determineFormat</span>(<a href="../ConsoleTools/class-ezcConsoleTableRow.htm" class="link">ConsoleTools\ezcConsoleTableRow</a> $row, <a href="../datatype-int.htm" class="link">int</a> $cellId)</li><li>Determine the format of a cells content.<br />
Walks the inheritance path upwards to determine the format of a cells content. Checks first, if the cell has it's own format (apart from 'default'). If not, checks the row for a format setting and uses the default format if not found.</li><li class="smaller">@param ezcConsoleTableRow $row The row this cell belongs to.</li><li class="smaller">@param int $cellId Index of the desired cell.</li><li class="smaller">@return string A format name.</li></ul></li><li class="Collapsed" id="f525cccaa16cad"><a href="javascript:void(0);" class="method-pri" target="main">determineBorderFormat</a>(<a href="../ConsoleTools/class-ezcConsoleTableRow.htm" class="link">ConsoleTools\ezcConsoleTableRow</a> $row)<ul class="description"><li>Private <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">determineBorderFormat</span>(<a href="../ConsoleTools/class-ezcConsoleTableRow.htm" class="link">ConsoleTools\ezcConsoleTableRow</a> $row)</li><li>Determine the format of a rows border.<br />
Walks the inheritance path upwards to determine the format of a rows border. Checks first, if the row has it's own format (apart from 'default'). If not, uses the default format.</li><li class="smaller">@param ezcConsoleTableRow $row The row this cell belongs to.</li><li class="smaller">@return string A format name.</li></ul></li><li class="Collapsed" id="f525cccaa17032"><a href="javascript:void(0);" class="method-pri" target="main">breakRows</a>(<span class="link">array(int=>string)</span> $cells, <span class="link">array(int=>int)</span> $colWidth)<ul class="description"><li>Private <span class="link">array(int=>string)</span> <span class="smallTitle">breakRows</span>(<span class="link">array(int=>string)</span> $cells, <span class="link">array(int=>int)</span> $colWidth)</li><li>Returns auto broken rows from an array of cells.<br />
The data provided by a user may not fit into a cell calculated by the class. In this case, the data can be automatically wrapped. The table row then spans over multiple physical console lines.</li><li class="smaller">@param array(int=&gt;string) $cells Array of cells in one row.</li><li class="smaller">@param array(int=&gt;int) $colWidth Columns widths array.</li><li class="smaller">@return array(int=&gt;string) Physical rows generated out of this row.</li></ul></li><li class="Collapsed" id="f525cccaa1789f"><a href="javascript:void(0);" class="method-pri" target="main">getColWidths</a>()<ul class="description"><li>Private <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">getColWidths</span>()</li><li>Determine width of each single column.</li></ul></li><li class="Collapsed" id="f525cccaa1f069"><a href="javascript:void(0);" class="method-pri" target="main">formatText</a>(<a href="../datatype-string.htm" class="link">string</a> $text, <a href="../datatype-string.htm" class="link">string</a> $format)<ul class="description"><li>Private <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">formatText</span>(<a href="../datatype-string.htm" class="link">string</a> $text, <a href="../datatype-string.htm" class="link">string</a> $format)</li><li>Returns the given $text formatted with $format.<br />
<br />
In case $useFormats is set to false in the output handler, the text is returned as given, without any formatting.</li><li class="smaller">@param string $text</li><li class="smaller">@param string $format</li></ul></li></ul>
	</div>
	<div id="footer">Documentation generated on Oct 15, 2013, 0:03:45 -0500 by <a href="http://pear.php.net/package/PHP_UML/" target="_new">PHP_UML</a></div>
</body>
</html>