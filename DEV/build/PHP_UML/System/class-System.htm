<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="content-type" content="text/html; charset=iso-8859-1"/>
	<title>class System</title>
	<link type="text/css" rel="stylesheet" href="../$resources/style.css"/>
	<script type="text/javascript" language="javascript" src="../$resources/treeview.js"></script>
</head>
<body onload="toggler.setupTreeView('MainList');toggler.backToMemorizedState('MainList', 'btnToggle')">
	<ul class="navig">
	<li><a href="javascript:toggler.toggleAll('MainList', 'btnToggle')" class="expandAllBtn" id="btnToggle">Expand all</a></li><li><a href="../help.htm" class="helpBtn">Help</a></li><li><a href="../index-all.htm" class="indexAllBtn">Index</a></li><li><a href="package-summary.htm" class="top">Package</a></li>
	</ul>
	<h1 class="class">System</h1>
	<div id="MainList">
	<div class="description"><p>Class <span class="title">System\System</span></p><ul class="description"><li>System offers cross plattform compatible system functions <br />
Static functions for different operations. Should work under Unix and Windows. The names and usage has been taken from its respectively GNU commands. The functions will return (bool) false on error and will trigger the error with the PHP trigger_error() function (you can silence the error by prefixing a '@' sign after the function call, but this is not recommended practice.  Instead use an error handler with {@link set_error_handler()}).<br />
<br />
Documentation on this class you can find in:<br />
http://pear.php.net/manual/ <br />
Example usage:<br />
if (!@System::rm('-r file1 dir1')) { print &quot;could not delete file1 or dir1&quot;; } <br />
In case you need to to pass file names with spaces, pass the params as an array:<br />
<br />
System::rm(array('-r', $file1, $dir1));</li><li class="smaller">@category pear</li><li class="smaller">@package System</li><li class="smaller">@author Tomas V.V. Cox &lt;cox@idecnet.com&gt;</li><li class="smaller">@copyright 1997-2006 The PHP Group</li><li class="smaller">@license http://www.php.net/license/3_0.txt PHP License 3.0</li><li class="smaller">@version Release: 1.6.1</li><li class="smaller">@link http://pear.php.net/package/PEAR</li><li class="smaller">@since Class available since Release 0.1</li><li>File: DEV/tools/phpcallgraph-0.8.0/lib/pear/System.php</li></ul></div><h2>Functions</h2><ul class="summary"><li class="Collapsed" id="f525cccacb6ccb"><a href="javascript:void(0);" class="method-pub" target="main">_parseArgs</a>(<a href="../datatype-string.htm" class="link">string</a> $argv, <a href="../datatype-string.htm" class="link">string</a> $short_options, <a href="../datatype-string.htm" class="link">string</a> $long_options<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">_parseArgs</span>(<a href="../datatype-string.htm" class="link">string</a> $argv, <a href="../datatype-string.htm" class="link">string</a> $short_options, <a href="../datatype-string.htm" class="link">string</a> $long_options<span class="defVal"> = null</span>)</li><li>returns the commandline arguments of a function</li><li class="smaller">@param string $argv the commandline</li><li class="smaller">@param string $short_options the allowed option short-tags</li><li class="smaller">@param string $long_options the allowed option long-tags</li><li class="smaller">@return array the given options and there values</li><li class="smaller">@access private</li></ul></li><li class="Collapsed" id="f525cccacb725d"><a href="javascript:void(0);" class="method-pub" target="main">raiseError</a>(<a href="../datatype-mixed.htm" class="link">mixed</a> $error)<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">raiseError</span>(<a href="../datatype-mixed.htm" class="link">mixed</a> $error)</li><li>Output errors with PHP trigger_error(). You can silence the errors with prefixing a &quot;@&quot; sign to the function call: @System::mkdir(..);</li><li class="smaller">@param mixed $error a PEAR error or a string with the error message</li><li class="smaller">@return bool false</li><li class="smaller">@access private</li></ul></li><li class="Collapsed" id="f525cccacb7619"><a href="javascript:void(0);" class="method-pub" target="main">_dirToStruct</a>(<a href="../datatype-string.htm" class="link">string</a> $sPath, <a href="../datatype-integer.htm" class="link">integer</a> $maxinst, <a href="../datatype-int.htm" class="link">int</a> $aktinst<span class="defVal"> = 0</span>)<ul class="description"><li>Public <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">_dirToStruct</span>(<a href="../datatype-string.htm" class="link">string</a> $sPath, <a href="../datatype-integer.htm" class="link">integer</a> $maxinst, <a href="../datatype-int.htm" class="link">int</a> $aktinst<span class="defVal"> = 0</span>)</li><li>Creates a nested array representing the structure of a directory <br />
System::_dirToStruct('dir1', 0) =&gt; Array ( [dirs] =&gt; Array ( [0] =&gt; dir1 ) <br />
[files] =&gt; Array ( [0] =&gt; dir1/file2 [1] =&gt; dir1/file3 ) )</li><li class="smaller">@param string $sPath Name of the directory</li><li class="smaller">@param integer $maxinst max. deep of the lookup</li><li class="smaller">@param integer $aktinst starting deep of the lookup</li><li class="smaller">@return array the structure of the dir</li><li class="smaller">@access private</li></ul></li><li class="Collapsed" id="f525cccacb7fc2"><a href="javascript:void(0);" class="method-pub" target="main">_multipleToStruct</a>(<a href="../datatype-array.htm" class="link">array</a> $files)<ul class="description"><li>Public <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">_multipleToStruct</span>(<a href="../datatype-array.htm" class="link">array</a> $files)</li><li>Creates a nested array representing the structure of a directory and files</li><li class="smaller">@param array $files Array listing files and dirs</li><li class="smaller">@see System::_dirToStruct()</li></ul></li><li class="Collapsed" id="f525cccacb8492"><a href="javascript:void(0);" class="method-pub" target="main">rm</a>(<a href="../datatype-string.htm" class="link">string</a> $args)<ul class="description"><li>Public <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">rm</span>(<a href="../datatype-string.htm" class="link">string</a> $args)</li><li>The rm command for removing files.<br />
Supports multiple files and dirs and also recursive deletes</li><li class="smaller">@param string $args the arguments for rm</li><li class="smaller">@return mixed PEAR_Error or true for success</li><li class="smaller">@access public</li></ul></li><li class="Collapsed" id="f525cccacb8b82"><a href="javascript:void(0);" class="method-pub" target="main">mkDir</a>(<a href="../datatype-string.htm" class="link">string</a> $args)<ul class="description"><li>Public <a href="../datatype-bool.htm" class="link">bool</a> <span class="smallTitle">mkDir</span>(<a href="../datatype-string.htm" class="link">string</a> $args)</li><li>Make directories.<br />
<br />
The -p option will create parent directories</li><li class="smaller">@param string $args the name of the director(y|ies) to create</li><li class="smaller">@return bool True for success</li><li class="smaller">@access public</li></ul></li><li class="Collapsed" id="f525cccacb94e0"><a href="javascript:void(0);" class="method-pub" target="main">cat</a>(<a href="../datatype-string.htm" class="link">string</a> $args)<ul class="description"><li>Public <a href="../datatype-boolean.htm" class="link">boolean</a> <span class="smallTitle">cat</span>(<a href="../datatype-string.htm" class="link">string</a> $args)</li><li>Concatenate files <br />
Usage:<br />
1) $var = System::cat('sample.txt test.txt'); 2) System::cat('sample.txt test.txt &gt; final.txt'); 3) System::cat('sample.txt test.txt &gt;&gt; final.txt'); <br />
Note: as the class use fopen, urls should work also (test that)</li><li class="smaller">@param string $args the arguments</li><li class="smaller">@return boolean true on success</li><li class="smaller">@access public</li></ul></li><li class="Collapsed" id="f525cccacb9dfb"><a href="javascript:void(0);" class="method-pub" target="main">mktemp</a>(<a href="../datatype-string.htm" class="link">string</a> $args<span class="defVal"> = null</span>)<ul class="description"><li>Public <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">mktemp</span>(<a href="../datatype-string.htm" class="link">string</a> $args<span class="defVal"> = null</span>)</li><li>Creates temporary files or directories. This function will remove the created files when the scripts finish its execution.<br />
<br />
Usage:<br />
1) $tempfile = System::mktemp(&quot;prefix&quot;); 2) $tempdir  = System::mktemp(&quot;-d prefix&quot;); 3) $tempfile = System::mktemp(); 4) $tempfile = System::mktemp(&quot;-t /var/tmp prefix&quot;); <br />
prefix -&gt; The string that will be prepended to the temp name (defaults to &quot;tmp&quot;).<br />
-d     -&gt; A temporary dir will be created instead of a file.<br />
-t     -&gt; The target dir where the temporary (file|dir) will be created. If this param is missing by default the env vars TMP on Windows or TMPDIR in Unix will be used. If these vars are also missing c:\windows\temp or /tmp will be used.</li><li class="smaller">@param string $args The arguments</li><li class="smaller">@return mixed the full path of the created (file|dir) or false</li><li class="smaller">@see System::tmpdir()</li><li class="smaller">@access public</li></ul></li><li class="Collapsed" id="f525cccacba6ae"><a href="javascript:void(0);" class="method-pub" target="main">_removeTmpFiles</a>()<ul class="description"><li>Public <a href="../datatype-void.htm" class="link">void</a> <span class="smallTitle">_removeTmpFiles</span>()</li><li>Remove temporary files created my mkTemp. This function is executed at script shutdown time</li><li class="smaller">@access private</li></ul></li><li class="Collapsed" id="f525cccacba979"><a href="javascript:void(0);" class="method-pub" target="main">tmpdir</a>()<ul class="description"><li>Public <a href="../datatype-string.htm" class="link">string</a> <span class="smallTitle">tmpdir</span>()</li><li>Get the path of the temporal directory set in the system by looking in its environments variables.<br />
Note: php.ini-recommended removes the &quot;E&quot; from the variables_order setting, making unavaible the $_ENV array, that s why we do tests with _ENV</li><li class="smaller">@return string The temporary directory on the system</li></ul></li><li class="Collapsed" id="f525cccacbaeda"><a href="javascript:void(0);" class="method-pub" target="main">which</a>(<a href="../datatype-string.htm" class="link">string</a> $program, <a href="../datatype-bool.htm" class="link">bool</a> $fallback<span class="defVal"> = false</span>)<ul class="description"><li>Public <a href="../datatype-mixed.htm" class="link">mixed</a> <span class="smallTitle">which</span>(<a href="../datatype-string.htm" class="link">string</a> $program, <a href="../datatype-bool.htm" class="link">bool</a> $fallback<span class="defVal"> = false</span>)</li><li>The &quot;which&quot; command (show the full path of a command)</li><li class="smaller">@param string $program The command to search for</li><li class="smaller">@param mixed $fallback Value to return if $program is not found</li><li class="smaller">@return mixed A string with the full path or false if not found</li><li class="smaller">@author Stig Bakken &lt;ssb@php.net&gt;</li></ul></li><li class="Collapsed" id="f525cccacbb850"><a href="javascript:void(0);" class="method-pub" target="main">find</a>(<a href="../datatype-mixed.htm" class="link">mixed</a> $args)<ul class="description"><li>Public <a href="../datatype-array.htm" class="link">array</a> <span class="smallTitle">find</span>(<a href="../datatype-mixed.htm" class="link">mixed</a> $args)</li><li>The &quot;find&quot; command <br />
Usage:<br />
<br />
System::find($dir); System::find(&quot;$dir -type d&quot;); System::find(&quot;$dir -type f&quot;); System::find(&quot;$dir -name *.php&quot;); System::find(&quot;$dir -name *.php -name *.htm*&quot;); System::find(&quot;$dir -maxdepth 1&quot;); <br />
Params implmented:<br />
$dir            -&gt; Start the search at this directory -type d         -&gt; return only directories -type f         -&gt; return only files -maxdepth &lt;n&gt;   -&gt; max depth of recursion -name &lt;pattern&gt; -&gt; search pattern (bash style). Multiple -name param allowed</li><li class="smaller">@param mixed Either array or string with the command line</li><li class="smaller">@return array Array of found files</li></ul></li></ul>
	</div>
	<div id="footer">Documentation generated on Oct 15, 2013, 0:03:46 -0500 by <a href="http://pear.php.net/package/PHP_UML/" target="_new">PHP_UML</a></div>
</body>
</html>