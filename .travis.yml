#TODO: 
# mysql database user
# database credentials, user, and permissions
# passwordless apt-get install
# SauceLabs Config
# Split with Beehive? (Requires adding delay to avoid commit-build-commit loop)
# Apache, Nginx, Cherokee, Hiawatha, etc Servers
# Possible to test caching, minification, etc?
# Fix exception error and uncomment PHPCallGraph
# PHP Documentation Generator
# JS Documentation Generator (YUI Docs)
# Test and Uncomment ERD Generation / Database Tools
# Add and Test Security Tools (OWASP-ZAP with Selenium)
# Static Code Analyzers (Scrutinizer, etc)
# Scrutinizer Free CI for Open Source?
# Include Codeception to consolidate testing?
# PHPUnit.xml needed
# Unit Testing for Javascript?

# see http://about.travis-ci.org/docs/user/languages/php/ for more hints
language: php

# list any PHP version you want to test against
php:
  # using major version aliases

  ## aliased to 5.2.17
  # - 5.2
  # aliased to a recent 5.3.x version
  - 5.3
  # aliased to a recent 5.4.x version
  - 5.4
  # aliased to a recent 5.5.x version
  - 5.5

# optionally specify a list of environments, for example to test different RDBMS
env:
  - DB=mysql
#  - DB=pgsql

#  global:
#    - SAUCE_USERNAME=myusername
#    - secure: my_accesskey_encrypted_using_the_travis_gem

before_script:
# execute any number of scripts before the test run, custom env's are available as variables
#  - sudo apt-get update
#  - sudo apt-get install sqlfairy
## Only if SQLFairy doesn't work (Backup Plan: SchemaSpy)
#  - sudo apt-get install graphviz

#  - if [[ "$DB" == "pgsql" ]]; then psql -c "DROP DATABASE IF EXISTS hello_world_test;" -U postgres; fi
#  - if [[ "$DB" == "pgsql" ]]; then psql -c "create database hello_world_test;" -U postgres; fi
  - if [[ "$DB" == "mysql" ]]; then mysql -e "create database IF NOT EXISTS tickets;" -uroot; fi

  - pear install PHP_UML  
  - pear channel-discover pear.phpqatools.org
  - pear install -f phpqatools/phpqatools
  - pear channel-discover pear.phpdoc.org
  - pear install phpdoc/phpDocumentor
  - phpenv rehash

#SELENIUM / SAUCELABS INTEGRATION
#PLACEHOLDER: NOT CORRECT FOR PHP. From Saucelabs tutorial "building a CI system using selenium builder github travis and sauce labs
#  - npm install -g se-interpreter

# omitting "script:" will default to phpunit
# use the $DB env variable to determine the phpunit.xml to use
script: 
##TESTING
##    UI TESTING
#Selenium and Appium(SauceLabs) (Sauce Connect?)
##    SECURITY TESTING
#OWASP-ZAP
# /path/to/ZapDir/zap.jar -daemon (Starts zap with no UI)
#RIPS
#Scrutinizer
#Vega
##    BEHAVIOR TESTING
#Behat
##    UNIT TESTING
#PHPUnit
#  - phpunit --configuration phpunit_$DB.xml --coverage-text
  
##DEV TOOLS
#PHP_UML
  - phpuml ./ -n TicketsCAD -o ./DEV/build/PHP_UML -f htmlnew
  - phpuml ./ -n TicketsCAD -o ./DEV/build/PHP_UML -f xmi
#PHPCPD
  - phpcpd ./ > ./DEV/build/PHPQATools/PHP-CPD/phpcpd_output.txt
#PHPMD (All 3 completed)
#  - phpmd ./ text codesize,unusedcode,naming > ./DEV/build/PHPQATools/PHP-MD/phpmd_output.txt
  - phpmd ./ text codesize > ./DEV/build/PHPQATools/PHP-MD/phpmd_codesize.txt
  - phpmd ./ text unusedcode > ./DEV/build/PHPQATools/PHP-MD/phpmd_unused-code.txt
  - phpmd ./ text naming > ./DEV/build/PHPQATools/PHP-MD/phpmd_naming.txt
#PHPDepend
  - pdepend --summary-xml=./DEV/build/PHPQATools/PDepend/summary.xml --jdepend-chart=./DEV/build/PHPQATools/PDepend/jdepend.svg --overview-pyramid=./DEV/build/PHPQATools/PDepend/pyramid.svg ./
#PHPCodeSniffer
  - phpcs ./ > ./DEV/build/PHPQATools/PHP-CS/phpcs-output.txt
#phploc
  - phploc ./ > ./DEV/build/PHPQATools/PHP-LOC/phploc-output.txt
  - phploc --log-csv ./DEV/build/PHPQATools/PHP-LOC/phploc-gitlog.csv --progress --git-repository . ./
#PHPCallGraph
#  - ./DEV/tools/phpcallgraph-0.8.0/bin/phpcallgraph.php -f png -o ./DEV/build/PHP-CallGraph/callgraph.png -r -p ./
#  - ./DEV/tools/phpcallgraph-0.8.0/bin/phpcallgraph.php -r -f deadcode ./ > ./DEV/build/PHP-CallGraph/phpcallgraph-deadcode.txt
#PHPCodeBrowser

##Documentation Generator
#PHPDocumentor (Mod to avoid documenting the documentation?)
  - phpdoc -d . -t ./DEV/build/docs --template checkstyle -i ./DEV/*
# - or - 
#Doxygen (Doxyfile stored in ./DEV/build/docs/Doxygen/)
# Need to install Doxygen
# Doxygen Usage:

#PHPDox (Create XML Config File, store in ./DEV/tools/Doc-Config)
#  - phpdox

# - and a -
#JS Doc Generator ...
#YUI Docs? (Requires node.js)

## Database Tools
#SQLFairy ERD Generation 
#(http://nsaunders.wordpress.com/2009/01/11/easy-visualisation-of-database-schemas-using-sqlfairy/)
#  - mysqldump -u username -p -d tickets > ./DEV/build/DB/tickets.sql
#  - sqlt-graph -f MySQL -o ./DEV/build/DB/tickets.png -t png ./DEV/build/DB/tickets.sql

#Backup Plan: SchemaSpy (Java Command Line for Generating Database ERDs)
##  requires Java be installed
#  - java -jar ./DEV/tools/schemaSpy.jar -t mysql -db tickets -u user [-p password] -o ./DEV/build/SchemaSpy/

# - or -
#SchemaCrawler

notifications:
# configure notifications (email, IRC, campfire etc)
#  - irc: "irc.freenode.org#travis"
  - email: false